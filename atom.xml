<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qingqing.zhao&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaoqingqing.github.io/"/>
  <updated>2016-08-03T14:43:13.943Z</updated>
  <id>https://zhaoqingqing.github.io/</id>
  
  <author>
    <name>qingqing-zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity3D-Assetbundle-打包和更新的两种做法</title>
    <link href="https://zhaoqingqing.github.io/2016/08/03/unity_assetbundle-build&amp;update-twomethod.html"/>
    <id>https://zhaoqingqing.github.io/2016/08/03/unity_assetbundle-build&amp;update-twomethod.html</id>
    <published>2016-08-03T14:43:13.943Z</published>
    <updated>2016-08-03T14:43:13.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文根据过往项目经验所写，部分版权归所属公司所有，未涉及代码部分。<br>两个项目有着不同的资源管理的方式：</p>
<ul>
<li>3D MMO RPG：    整体打包</li>
<li>2D日式动作RPG：分散打包<a id="more"></a>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3></li>
</ul>
<p>开发引擎：unity3d 4.x<br>运行环境：android/ios<br>解包工具：unity studio <a href="http://www.cnblogs.com/zhaoqingqing/p/3751351.html" target="_blank" rel="external">http://www.cnblogs.com/zhaoqingqing/p/3751351.html</a><br>安卓模拟器：海马玩 v0.10.x + 文件管理器 ，基于安卓os 4.2.2</p>
<h2 id="完整打包"><a href="#完整打包" class="headerlink" title="完整打包"></a>完整打包</h2><p>每一个资源都是整体打包，下面举例说明</p>
<h3 id="npc打包例子"><a href="#npc打包例子" class="headerlink" title="npc打包例子"></a>npc打包例子</h3><p>某NPC文件<strong>zjws_01f_c.unity3d</strong> ，解包后的文件如下：</p>
<ul>
<li>dian02 #-464001035.dds</li>
<li>ZJWS_01F_C #862139260.dds</li>
<li>ZB_WS_JJIA01F_C #-358047209.dds</li>
<li>uicharacter #977472046.shader</li>
<li>Particle Alpha Blend #434039645.shader</li>
<li>Sprite Vertex Colored #1478359439.shader</li>
</ul>
<p>在Unity Studio中看到的Hierarchy如下：</p>
<pre>
zjws_01f_c
    run_stand_f
    zb_ws_jjiao1f
    zjws_01f
    zjws_01f_silianji
    zjws_01f_c
</pre>

<hr>
<h3 id="地图打包例子"><a href="#地图打包例子" class="headerlink" title="地图打包例子"></a>地图打包例子</h3><p>M1_ACT_ZBT_Minimap.unity3d 某地图文件，解包后的文件如下：</p>
<ul>
<li>M1_ACT_ZBT_Minimap #02.dds</li>
<li>Unlit-Alpha #03.shader</li>
</ul>
<p>在Unity Studio中看到的Hierarchy如下：</p>
<pre>
无
</pre>

<h3 id="UI打包例子"><a href="#UI打包例子" class="headerlink" title="UI打包例子"></a>UI打包例子</h3><p>zjws_01f_c.unity3d 某NPC文件，解包后的文件如下：</p>
<ul>
<li>dian02 #-464001035.dds</li>
<li>ZJWS_01F_C #862139260.dds</li>
<li>ZB_WS_JJIA01F_C #-358047209.dds</li>
<li>uicharacter #977472046.shader</li>
<li>Particle Alpha Blend #434039645.shader</li>
<li>Sprite Vertex Colored #1478359439.shader</li>
</ul>
<p>在Unity Studio中看到的Hierarchy如下：</p>
<pre>
zjws_01f_c
    run_stand_f
    zb_ws_jjiao1f
    zjws_01f
    zjws_01f_silianji
    zjws_01f_c
</pre>

<h2 id="资源更新"><a href="#资源更新" class="headerlink" title="资源更新"></a>资源更新</h2><h3 id="如何触发更新"><a href="#如何触发更新" class="headerlink" title="如何触发更新"></a>如何触发更新</h3><h3 id="resversion-txt-文件列表"><a href="#resversion-txt-文件列表" class="headerlink" title="resversion.txt 文件列表"></a>resversion.txt 文件列表</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">object&#123;2&#125;</div><div class="line">    buildDatetime:20160728-010315</div><div class="line">    listResInfo[2483]</div><div class="line">        0 &#123;3&#125;</div><div class="line">        1 &#123;3&#125;</div><div class="line">            strName    : composeupgrade</div><div class="line">            strPath    : assetbundles/audios/composeupgrade.unity3d</div><div class="line">            strHash    : c1c28bc73bb4affc7963cc073401c10</div><div class="line">        ......此处省略几千行</div></pre></td></tr></table></figure>
<p>本地的：buildDatetime : 20160727-115054<br>服务器：buildDatetime : 20160728-010315<br>两边不一致，玩家需要下载更新<br>PS:每次根据buildDatetime来判断是否需要更新资源？</p>
<h3 id="要更新的文件"><a href="#要更新的文件" class="headerlink" title="要更新的文件"></a>要更新的文件</h3><p>制作的更新包如下：</p>
<h3 id="android-目录"><a href="#android-目录" class="headerlink" title="android 目录"></a>android 目录</h3><p>路径：/mnt - sdcard - Android - data - com.xx.xxgame.uc - files - xxgame - data - android</p>
<ol>
<li>resversion.unity3d</li>
<li>settingclient.unity3d</li>
<li>version.txt</li>
</ol>
<h2 id="资源目录"><a href="#资源目录" class="headerlink" title="资源目录"></a>资源目录</h2><p>StreamingAssets\</p>
<ul>
<li>Android\</li>
<li>IOS\<ul>
<li>Windows\</li>
</ul>
</li>
</ul>
<p>下面以Android目录为例</p>
<ul>
<li>assetbundles\</li>
<li>scene\<ul>
<li>textures\</li>
<li>resversion.txt</li>
<li>resversion.unity3d</li>
<li>settingclient.unity3d  (客户端所有的配置表，打包进同一个ab文件)</li>
</ul>
</li>
</ul>
<h3 id="目录详解"><a href="#目录详解" class="headerlink" title="目录详解"></a>目录详解</h3><pre>
assetbundles\
    assets
    audios
    fightskill
    npc
    scene
       building
       rocks
       map/trees/textures
       ....more scene files
    ui

------------
scene\
    xxboos
       xxboss.unity3d
       xxboss.txt
       xxboss.bar
       xxboss_nav.unity3d
    bht
       bht1trap1, bht1trap2, bht1trap3 | bht2trap1, bht2trap2, bht3trap3 |
       ....更多的主城文件

------------
textures\
    3D贴图文件

</pre>

<hr>
<h2 id="分散打包"><a href="#分散打包" class="headerlink" title="分散打包"></a>分散打包</h2><h2 id="资源更新-1"><a href="#资源更新-1" class="headerlink" title="资源更新"></a>资源更新</h2><h3 id="如何触发更新-1"><a href="#如何触发更新-1" class="headerlink" title="如何触发更新"></a>如何触发更新</h3><p>本地assetbundle版本：10050，服务器assetbundle版本：10051，玩家需要下载更新。</p>
<h3 id="资源目录-1"><a href="#资源目录-1" class="headerlink" title="资源目录"></a>资源目录</h3><pre>
StreamingAssets
   Android
      Actor
      Audio
      Card
      Common
      Effect
      Level
      Map
      UI
      ....
      Version.txt
      GameSetting.ab (客户端所有的配置表，打包进同一个ab文件)
   IOS
   Windows
</pre>

<h3 id="更新文件"><a href="#更新文件" class="headerlink" title="更新文件"></a>更新文件</h3><p><strong>最新版本号文件</strong></p>
<ul>
<li>NewestVersion_Android.txt<br>内容：<code>10051</code> 最新的assetbundle版本号<br><br></li>
</ul>
<p><strong>更新包</strong></p>
<ul>
<li><p>Android_10050_10051.zip<br><em>10050更新到10051版本的要下载的资源</em></p>
</li>
<li><p>Android_born_10051.zip<br> <em>10051新APK包的初始资源</em></p>
</li>
<li><p>Android_full_10051.zip<br> <em>10051的完整资源</em><br><br></p>
</li>
</ul>
<p><strong>更新包json</strong></p>
<ul>
<li>Android_10050_10051.zip.json<br><code>{&quot;MD5&quot;:&quot;297714FA3CEF25C63AA6BF9432918278&quot;,&quot;Size&quot;:  62473769  ,&quot;FileCount&quot;:4438}</code></li>
<li>Android_born_10051.zip.json<br><code>{&quot;Size&quot;:  78895922  , &quot;FileCount&quot;: 4817, &quot;MD5&quot;: &quot;72FD467252329D01799DD65E9CCA23F0&quot;}</code></li>
<li>Android_full_10051.zip.json<br><code>{&quot;MD5&quot;:&quot;6F8D541B388C98A0FBDC6F5BF4DA7122&quot;,&quot;Size&quot;:  84529108  ,&quot;FileCount&quot;:4864}</code></li>
</ul>
<hr>
<h2 id="ab依赖处理"><a href="#ab依赖处理" class="headerlink" title="ab依赖处理"></a>ab依赖处理</h2><p>以下内容来自ulua&amp;tolua技术交流群，时间2016-08-03 14:30 ~ 15:30</p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p><strong>故国之晚秋 </strong></p>
<p>异步读取AB就是要注意，读取状态</p>
<p>因为AB不仅仅只有读取，还有清理策略，要防止正在加载，又被清理</p>
<p>还有就是，A依赖B，C也依赖B。现在读取A，先读取B，这时候立马读取C，这时候B也在读取，不要反复去读取，减少</p>
<p>读取A，本来就会形成队列A-&gt;C-&gt;D,这是A形成的队列，然后读取B，形成<br>B-&gt;C（只是把C的节点加到B，并不会再去加C后面的依赖，只是判断C的状态），读取顺序都是从右到左</p>
<p>并且，出现这个情况只是在都是处于正在读取状态</p>
<p>如果用WWW，同时读太多，内存吃紧</p>
<p>AB不要打得太散也不要打得太多</p>
<p>简单的解决办法：</p>
<p>同步AB都解决了，同步加载AB没有这个问题，同步ab最好不要做的太细。</p>
<p>同步很简单，同步读取AB</p>
<p><strong>上海-江南-5.3.1f4 </strong></p>
<p>特别是公共资源<br>多引用的单独打包<br>卸载清理要处理好</p>
<p>衣匠</p>
<p>记住一点，先依赖，后主资源</p>
<h3 id="资源名"><a href="#资源名" class="headerlink" title="资源名"></a>资源名</h3><p>自动化,</p>
<p>我是通过文件名规范来做，有人是通过工具来做</p>
<p>建目录的时候，加个@或者_就行，主要跟文件夹有关，否则一个资源一个AB</p>
<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>之前项目只支持非压缩AB，<br>后面加入压缩AB后，复杂度几何上升<br>之前游戏项目也只用了非压缩AB</p>
<p>我们现在也不用LZMA了，原因是加载速度和内存</p>
<h4 id="fbx压缩"><a href="#fbx压缩" class="headerlink" title="fbx压缩"></a>fbx压缩</h4><p>晚秋，你fbx压缩是3dmax导出的插件啊还是unity插件？</p>
<p>3DSMAX 脚本插件，和UNITY插件两个都有</p>
<p>原理：fbx剔除多余帧，有加判断</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>usb 沁血寒冰</p>
<hr>
<p><strong>故国之晚秋</strong></p>
<p>近期：开源fbx压缩</p>
<p>计划：ab加载依赖系统</p>
<h2 id="做法比较"><a href="#做法比较" class="headerlink" title="做法比较"></a>做法比较</h2><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><p>游戏中所有资源都打包成assetbundle，在游戏启动时进行加载。<br>同步和异步两种加载方式<br>Assetbundle文件放在StreamingAssets目录，区分不同平台。以stream的形式加载，用Unity的<code>www.load</code>API</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="完整打包-1"><a href="#完整打包-1" class="headerlink" title="完整打包"></a>完整打包</h4><p>在加载时一般只需要加载单个文件+共用资源即可，</p>
<h4 id="分散打包-1"><a href="#分散打包-1" class="headerlink" title="分散打包"></a>分散打包</h4><p>分散打包则先加载依赖再加载主文件</p>
<h4 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文根据过往项目经验所写，部分版权归所属公司所有，未涉及代码部分。&lt;br&gt;两个项目有着不同的资源管理的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3D MMO RPG：    整体打包&lt;/li&gt;
&lt;li&gt;2D日式动作RPG：分散打包
    
    </summary>
    
      <category term="Unity3D项目日志" scheme="https://zhaoqingqing.github.io/categories/Unity3D%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Unity3D" scheme="https://zhaoqingqing.github.io/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>微软准备开源PowerShell</title>
    <link href="https://zhaoqingqing.github.io/2016/08/02/microsoft-powershell-opensource.html"/>
    <id>https://zhaoqingqing.github.io/2016/08/02/microsoft-powershell-opensource.html</id>
    <published>2016-08-02T12:35:38.692Z</published>
    <updated>2016-08-02T15:29:08.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微软有计划在近期内开源PowerShell"><a href="#微软有计划在近期内开源PowerShell" class="headerlink" title="微软有计划在近期内开源PowerShell"></a>微软有计划在近期内开源PowerShell</h2><p>近日微软再次在向开源投出橄榄枝， PowerShell是面向Windows和Windows Server的自动化平台和脚本语言，帮助用户简化系统的管理。在纳德拉的带领下微软也逐渐走向开放，根据相关爆料称微软有计划在近期内 开源该脚本语言。</p>
<p>知名Windows爆料人士WalkingCat和Tom Hounsell在推文都分享了他们的发现。Tom在包的元数据说明中注意到这样一段话：“PowerShell是开源、跨平台、脚本语言和丰富的对象Shell。”但是目前尚未得到微软官方证实。<br><a id="more"></a></p>
<h2 id="PowerShell已经开源了？"><a href="#PowerShell已经开源了？" class="headerlink" title="PowerShell已经开源了？"></a>PowerShell已经开源了？</h2><p>问：微软的PowerShell脚本语言已经开源了 ？</p>
<p>答：绝对真的！已经！</p>
<p>问：源码在哪？</p>
<p>答：微软.net源码网站。   <a href="http://referencesource.microsoft.com/" target="_blank" rel="external">http://referencesource.microsoft.com/</a></p>
<p> 问：为什么在哪里？</p>
<p>答： powershell本身是基于.net的。是<code>System.Management</code>其中的一个类。</p>
<p>问：powershell源码如何看？</p>
<p>答：在 namespaces 搜索栏输入  </p>
<p><code>System.Management.Automation.PowerShell</code></p>
<p><code>System.Management.Automation.ScriptBlock</code> 等。</p>
<h2 id="问：powershell有什么特色？"><a href="#问：powershell有什么特色？" class="headerlink" title="问：powershell有什么特色？"></a>问：powershell有什么特色？</h2><p>答：cmd（bat）中有命令行管道。vbs中有面向对象。 powershell相当于bat+vbs。既有命令行和管道，又有面向对象。并极大增强了命令。相当于linux中的bash+python。</p>
<p>面向对象比字符串增加了属性和方法。 返回的属性，比字符串粒度更小，更严禁细致。让你写脚本不用扣字符串。 方法让你不用编程，就有相关功能。</p>
<h2 id="问：能否介绍下windows命令行的历史？"><a href="#问：能否介绍下windows命令行的历史？" class="headerlink" title="问：能否介绍下windows命令行的历史？"></a>问：能否介绍下windows命令行的历史？</h2><p>答： win2000时代：基本上只有图形功能，而对应的命令缺失。</p>
<p>win2003时代：图形功能，基本都有对应的命令。但只限于win。</p>
<p>win2008时代：除了win之外的微软软件中。图形功能，而对应的命令基本全了。但还都是面向字符串的。</p>
<p>win2012时代：重新造所有轮，用所有powershell命令代替所有字符串命令。使windows命令行全面进化到【面向对象】阶段。 </p>
<p>winxp：cmd命令行。</p>
<p>win7：基本powershell。</p>
<p>win8.1：全面【面向对象】。</p>
<p>win10：更全面，连剪贴板都面向对象了！ </p>
<h2 id="问：powershell的缺点是什么？"><a href="#问：powershell的缺点是什么？" class="headerlink" title="问：powershell的缺点是什么？"></a>问：powershell的缺点是什么？</h2><p>答： 依赖高版本windows。 </p>
<h2 id="问：兼容老版CMD"><a href="#问：兼容老版CMD" class="headerlink" title="问：兼容老版CMD?"></a>问：兼容老版CMD?</h2><p>答：1 语法不兼容cmd和bat。powershell语法更佳。</p>
<p>2 所有外部命令都兼容。比如ping.exe等。 </p>
<p>问：powershell源码的字体和配色，看起来有点矮丑挫，咋办？</p>
<p>答：用powershell ise 高大上 【字体 + 配色文件】。  </p>
<h2 id="问：powershell比CMD（bat）强在哪"><a href="#问：powershell比CMD（bat）强在哪" class="headerlink" title="问：powershell比CMD（bat）强在哪?"></a>问：powershell比CMD（bat）强在哪?</h2><p>答：</p>
<p>1 语法方面。语法简单。有函数，功能强大。</p>
<p>2 有正则，有查找，替换，切割，有大字符串对象，更适合于处理字符串。</p>
<p>3 有多线程并发，多进程并发。有计时器。有图形界面。</p>
<h2 id="问：powershell比python如何？"><a href="#问：powershell比python如何？" class="headerlink" title="问：powershell比python如何？"></a>问：powershell比python如何？</h2><p>答：</p>
<p>1 python可以跨平台，powershell暂时不能，这是缺点。</p>
<p>2 powershell为win峰。win本地深耕比python深。而python有些独有的linux功能powershell没有。</p>
<p>2.1 有管理dns服务器，dhcp服务器，打印机，网卡，域服务器，exchange服务器管理命令。这些python不行。</p>
<p>2.2 .net内置图形界面【System.Windows.Forms】powershell开发图形界面比python容易。</p>
<p>3 手册中文，开发工具中文，调试功能佳。不容易乱码等。   </p>
<h2 id="问：powershell比linux-bash如何？"><a href="#问：powershell比linux-bash如何？" class="headerlink" title="问：powershell比linux bash如何？"></a>问：powershell比linux bash如何？</h2><p>答：</p>
<p>1 bash中没有属性方法，python中没有管道命令行。假如python带有命令行管道，bash跪不？</p>
<p>2 bash中有多线程，计时器，图形界面？ </p>
<h2 id="问：我听说linux命令比win多，更全，对么？"><a href="#问：我听说linux命令比win多，更全，对么？" class="headerlink" title="问：我听说linux命令比win多，更全，对么？"></a>问：我听说linux命令比win多，更全，对么？</h2><p>答：</p>
<p>win中命令更多，更全面，linux不行。</p>
<p>1 powershell命令比linux多得多。</p>
<p>2 linux软件中，很多命令缺失。不能【修改软件运行时的配置】。</p>
<p>2.1 上述exchange服务器，命令手册在：    <a href="https://technet.microsoft.com/zh-cn/library/bb124413.aspx" target="_blank" rel="external">https://technet.microsoft.com/zh-cn/library/bb124413.aspx</a>    500多条命令，哪个linux邮件服务器能比？</p>
<p>2.2 给bind服务器中的一个dns域中的一个域名，添加一个ip。如何用命令实现？</p>
<p>3 linux软件依赖配置文件，但是有些命令只能【修改软件运行时的配置】。而没有【导出单个配置到文件】，【导出所有配置到文件】的功能。</p>
<p>3.1 win2012中的iis管理命令中有Backup-WebConfiguration，Clear-WebConfiguration，Get-WebConfiguration，Restore-WebConfiguration。这些命令 今年出的nginx中有对应的命令么？ </p>
<h2 id="问：powershell能管理linux么？"><a href="#问：powershell能管理linux么？" class="headerlink" title="问：powershell能管理linux么？"></a>问：powershell能管理linux么？</h2><p>答： 可以的。</p>
<p>powershell的做法是外部合作，而不是内部取代bash。</p>
<p>1 通过【powershell dsc】或【powershell + sftp客户端】来推拉配置文件。</p>
<p>2 通过【ssh客户端模块】，模拟linux终端。远程调用linux内置的bash，python等，返回结果。 </p>
<h2 id="问：我只有winxp，2001年出的，没装powershell，没有curl，就没法用powershell了吧？"><a href="#问：我只有winxp，2001年出的，没装powershell，没有curl，就没法用powershell了吧？" class="headerlink" title="问：我只有winxp，2001年出的，没装powershell，没有curl，就没法用powershell了吧？"></a>问：我只有winxp，2001年出的，没装powershell，没有curl，就没法用powershell了吧？</h2><p>答： 可以的。</p>
<p>还是用外部合作的办法。通过http(s)，用b/s的方法访问。</p>
<p>1 找一台有高版本win的电脑或虚拟机，在上面安装上支持powershell的http服务器。如： <a href="http://www.poshserver.net/" target="_blank" rel="external">http://www.poshserver.net/</a>            这个软件支持http，https，php，powershell，自定义端口，win认证。</p>
<p>2 在bat中用mshta ( <a href="http://powershell服务器ip/xxx.ps1" target="_blank" rel="external">http://powershell服务器ip/xxx.ps1</a> “get-date” ) 之类的命令即可。 </p>
<h2 id="问：powershell的强项优势是什么？"><a href="#问：powershell的强项优势是什么？" class="headerlink" title="问：powershell的强项优势是什么？"></a>问：powershell的强项优势是什么？</h2><p>答：</p>
<p>1 .net在win中的性能【应该最佳】，强于java和python。用同样语句，用同样对象的powershell脚本，我测了几个，比py稍 快。（未做定论）个人认为是虚拟机优化的最好的原因。</p>
<p>2 开发winform，wpf图形界面。或者即是命令行，又是图形程序。（类似于ghost.exe）</p>
<p>3 powershell多线程可以用多核。</p>
<p>4 win系统管理最强，绝大数微软软件。</p>
<p>5 管理vmware，微软云，亚马逊云，和云中的虚拟机。 </p>
<h2 id="问：将来powershell会进入安卓，mac-osx么？"><a href="#问：将来powershell会进入安卓，mac-osx么？" class="headerlink" title="问：将来powershell会进入安卓，mac osx么？"></a>问：将来powershell会进入安卓，mac osx么？</h2><p>答： 不知道。</p>
<p>但powershell会进入物联网系统。win11 iot？将来树莓派应该可以用上。</p>
<p>原文地址：<a href="http://www.windoweye.com/news/2016/07/281052.html" target="_blank" rel="external">http://www.windoweye.com/news/2016/07/281052.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;微软有计划在近期内开源PowerShell&quot;&gt;&lt;a href=&quot;#微软有计划在近期内开源PowerShell&quot; class=&quot;headerlink&quot; title=&quot;微软有计划在近期内开源PowerShell&quot;&gt;&lt;/a&gt;微软有计划在近期内开源PowerShell&lt;/h2&gt;&lt;p&gt;近日微软再次在向开源投出橄榄枝， PowerShell是面向Windows和Windows Server的自动化平台和脚本语言，帮助用户简化系统的管理。在纳德拉的带领下微软也逐渐走向开放，根据相关爆料称微软有计划在近期内 开源该脚本语言。&lt;/p&gt;
&lt;p&gt;知名Windows爆料人士WalkingCat和Tom Hounsell在推文都分享了他们的发现。Tom在包的元数据说明中注意到这样一段话：“PowerShell是开源、跨平台、脚本语言和丰富的对象Shell。”但是目前尚未得到微软官方证实。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhaoqingqing.github.io/2016/08/01/hello-world.html"/>
    <id>https://zhaoqingqing.github.io/2016/08/01/hello-world.html</id>
    <published>2016-08-01T12:03:23.513Z</published>
    <updated>2016-08-02T15:29:15.548Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
