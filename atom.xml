<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qingqing.zhao&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaoqingqing.github.io/"/>
  <updated>2016-11-07T13:28:39.753Z</updated>
  <id>https://zhaoqingqing.github.io/</id>
  
  <author>
    <name>qingqing-zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Resharper 检测所有NullReferenceExceptions(空指针)</title>
    <link href="https://zhaoqingqing.github.io/2016/10/23/resharper_detect_all_nullrefrences.html"/>
    <id>https://zhaoqingqing.github.io/2016/10/23/resharper_detect_all_nullrefrences.html</id>
    <published>2016-10-22T16:00:00.000Z</published>
    <updated>2016-11-07T13:28:39.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>”null exception“很见的一种异常，但在某些情况下却会引起严重的bug！</p>
<p>本文目的就是对代码进行null 的检查，避免不应该出现的Error。</p>
<p>本文借助reshaper，全局检测项目中所有可能出现的null exception</p>
<p>关于resharper的知识：<a href="http://zzk.cnblogs.com/s?w=blog%3Azhaoqingqing%20resharper" target="_blank" rel="external">http://zzk.cnblogs.com/s?w=blog%3Azhaoqingqing%20resharper</a></p>
<a id="more"></a>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Windows 7 X64</p>
<p>Visual Studio 2015社区版</p>
<p>Resharper 10.x</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在可能出现null的字段/属性上按<strong>Alt+Enter</strong> ，让Resharper智能分析整个项目中可能出现null exception的地方</p>
<p><img src="http://images2015.cnblogs.com/blog/363476/201610/363476-20161017111044607-575199101.png" alt=""></p>
<h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><p>待resharper分析完成之后，可以点击对应的代码文件，跳到对应的位置，进行代码修正。</p>
<p><img src="http://images2015.cnblogs.com/blog/363476/201610/363476-20161017111025810-1767474978.png" alt=""></p>
<h3 id="Resharper的Null-Detect"><a href="#Resharper的Null-Detect" class="headerlink" title="Resharper的Null Detect"></a>Resharper的Null Detect</h3><p><a href="https://www.jetbrains.com/help/resharper/2016.1/Detect_possible_NullReferenceExceptions.html" target="_blank" rel="external">https://www.jetbrains.com/help/resharper/2016.1/Detect_possible_NullReferenceExceptions.html</a></p>
<h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><p>《编程精粹:编写高质量C语言代码》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h3&gt;&lt;p&gt;”null exception“很见的一种异常，但在某些情况下却会引起严重的bug！&lt;/p&gt;
&lt;p&gt;本文目的就是对代码进行null 的检查，避免不应该出现的Error。&lt;/p&gt;
&lt;p&gt;本文借助reshaper，全局检测项目中所有可能出现的null exception&lt;/p&gt;
&lt;p&gt;关于resharper的知识：&lt;a href=&quot;http://zzk.cnblogs.com/s?w=blog%3Azhaoqingqing%20resharper&quot;&gt;http://zzk.cnblogs.com/s?w=blog%3Azhaoqingqing%20resharper&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Unity3D项目日志" scheme="https://zhaoqingqing.github.io/categories/Unity3D%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Unity3D" scheme="https://zhaoqingqing.github.io/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>玩转Unity资源，对象和序列化(下)</title>
    <link href="https://zhaoqingqing.github.io/2016/08/31/unity_assets_object_serialization_2.html"/>
    <id>https://zhaoqingqing.github.io/2016/08/31/unity_assets_object_serialization_2.html</id>
    <published>2016-08-31T05:31:27.000Z</published>
    <updated>2016-10-23T09:02:41.811Z</updated>
    
    <content type="html"><![CDATA[<p>本文将从Unity编辑器和运行时两个角度出发，主要探讨以下两方面内容：<strong>Unity序列化系统内部细节</strong>以及<strong>Unity如何维护不同对象之间的强引用</strong>。另外还会讨论对象与资源的技术实现差别。</p>
<p>译注：除非特别说明，下文中所有的“资源”均指代“Asset”。</p>
<p>本文内容是理解在Unity中如何高效加载和卸载资源的基础。正确的资源管理对缩短加载时间并减少内存占用来说至关重要。之前已经介绍了 <em><a href="http://www.cnblogs.com/zhaoqingqing/p/5823927.html" target="_blank" rel="external">上半部分</a></em>，今天继续为大家分享下半部分内容。</p>
<a id="more"></a>
<h2 id="1-5-序列化和实例"><a href="#1-5-序列化和实例" class="headerlink" title="1.5. 序列化和实例"></a>1.5. 序列化和实例</h2><h3 id="实例ID"><a href="#实例ID" class="headerlink" title="实例ID"></a>实例ID</h3><p>尽管文件GUID和本地ID已准备妥当，它们可以强有力地维护资源之间的关系，但还有一个问题，GUID比较效率低下，我们需要为运行时准备一个效率更高的解决方案。Unity在内部维护着一个缓存表(2)，负责将文件GUID和本地ID转换成为整数数值，这个数值在本次会话中是唯一的，称作实例ID。实例ID会简单地以单调递增的方式分配给缓存中新注册的对象。</p>
<p>缓存负责维护实例ID与文件GUID和本地ID定义的对象源数据位置以及对象在内存中的地址（如果存在）的映射。 这样Unity就能够强而有力地保证它们互相之间的引用关系。通过解析实例ID，我们能够快速找到并返回ID对应的已载入实例。如果目标没有被加载，则Unity会通过文件GUID和本地ID解析获得对象的源数据，实时载入对象。</p>
<p>启动时，实例ID缓存与所有工程内建的对象（例如在场景中被引用），以及Resources文件夹下的所有对象，都会一起被初始化。如果在运行时(3)导入了新的资源，或从AssetBundle中载入了新的对象，缓存会被更新并为这些对象添加相应条目。实例ID仅在失效时才会被从缓存中移除，当提供了指定文件GUID和本地ID的AssetBundle被卸载时就会产生移除操作。</p>
<p>卸载AssetBundle会使实例ID失效，实例ID与其文件GUID和本地ID之间的映射会被删除以便节省内存。重新载入AssetBundle后，载入的每个对象都会获得一个新的实例ID。</p>
<p>关于AssetBundle隐式卸载的更深层次讨论，参考<a href="https://unity3d.com/learn/tutorials/topics/best-practices/asset-bundle-usage-patterns" target="_blank" rel="external">AssetBundle Usage Patterns</a>中的管理<a href="https://unity3d.com/learn/tutorials/topics/best-practices/asset-bundle-usage-patterns#Managing_Loaded_Assets" target="_blank" rel="external">已加载资源章节</a>。</p>
<h3 id="注意事项-IOS上挂起状态"><a href="#注意事项-IOS上挂起状态" class="headerlink" title="注意事项(IOS上挂起状态)"></a>注意事项(IOS上挂起状态)</h3><p>注意在某些平台上，有一些系统事件会使得对象在内存中被强行卸载。例如iOS平台上，当一个app处于挂起状态时，图形资源就会从显存中卸载。如果这些对象都来自于一个已被卸除的AssetBundle时，Unity将无法再次从源数据处加载这些对象。任何已有的对这些对象的引用都会失效。这个例子中，导致的后果就是出现网格不可见（丢失），或模型的纹理和材质呈现为洋红色（Shader丢失）。</p>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>提示：在运行时，对上述控制流程的描述并非完全准确。文件GUID和本地ID的比较操作在载入负担较重时的效率也会下降。构建Unity工程时，文件GUID和本地ID，确切地说会被映射到一种更简单的格式中。不过概念还是大致相同的，在考虑“运行时”的时候以文件GUID和本地ID的工作方式为思路还是有一些参考意义的。</p>
<p>这也是在运行时资源的文件GUID无法被调取的原因。</p>
<h2 id="1-6-MonoScripts"><a href="#1-6-MonoScripts" class="headerlink" title="1.6.MonoScripts"></a>1.6.MonoScripts</h2><p>理解MonoBehaviour很重要的一点是知道它有一个对MonoScript的引用。MonoScript的用途非常简单，里面包括了定位某个具体的编程类所需要的信息。这两种对象都没有程序类的可执行代码。</p>
<p>一个MonoScript含有三个字符串：程序库名称，类名称，命名空间。</p>
<h3 id="程序库-dll"><a href="#程序库-dll" class="headerlink" title="程序库(dll)"></a>程序库(dll)</h3><p>构建工程时，Unity会收集Assets文件夹中独立的脚本文件并将它们编译，组成一个Mono程序库。要特别说明的是，Unity会将Assets目录中的语言分开编译，Assets/Plugins目录中的脚本同理。Plugins子目录之外的C#脚本会放在Assembly-CSharp.dll中。而Plugins及其子目录中的脚本则放置在Assembly-CSharp-firstpass.dll中，以此类推。</p>
<p>这些程序库（加上预编译好的DLL程序库）将被包含在最终构建的Unity应用程序中。这些程序库都会被MonoScript所引用。与其他类型的资源不同，Unity应用程序中的所有应用程序都会在程序第一次启动时被加载。</p>
<p>MonoScript就是为什么AssetBundle（或一个场景，一个Prefab）中的MonoBehaviour组件不包含有任何实际可执行代码的原因。这样就可以让不同的MonoBehaviour引用某个共享类，即便这些MonoBehaviour不在同一个AssetBundle中。</p>
<h2 id="1-7-资源（Resource）生命周期"><a href="#1-7-资源（Resource）生命周期" class="headerlink" title="1.7.资源（Resource）生命周期"></a>1.7.资源（Resource）生命周期</h2><p><strong>UnityEngine.Objects从内存中加载或卸载的时间点是定义好的</strong>。为了缩短程序载入时间，管理应用程序的内存足迹，理解UnityEinge.Object的资源生命周期是很重要的。</p>
<h3 id="加载UnityEngine-Object的两种方式"><a href="#加载UnityEngine-Object的两种方式" class="headerlink" title="加载UnityEngine.Object的两种方式"></a>加载UnityEngine.Object的两种方式</h3><p><strong>有两种加载UnityEngine.Object的方式：自动加载或外部加载</strong>。</p>
<p>当对象的实例ID与对象本身解引用，对象当前未被加载到内存中，而且可以定位到对象的源数据，此时对象会被自动加载。对象也可以外部加载，通过在脚本中创建对象或调用资源加载API来载入对象（例如<a href="http://docs.unity3d.com/ScriptReference/AssetBundle.LoadAsset.html?_ga=1.182882597.2098911022.1464579255" target="_blank" rel="external">AssetBundle.LoadAsset</a>）。</p>
<p>对象加载后，Unity会尝试修复任何可能存在的引用关系，通过将每个引用的文件GUID和本地ID转化成为实例ID的方式。</p>
<p>一旦对象的实例ID被解引用且满足以下两个标准时，对象会被强制加载：</p>
<ol>
<li>实例ID引用了一个没有被加载的对象。</li>
<li>实例ID在缓存中存在对应的有效GUID和本地ID。</li>
</ol>
<p>这种情况通常会在引用被加载并解析后很短的一段时间内发生。</p>
<p>如果文件GUID和本地ID没有实例ID，或一个已卸载对象的实例ID引用了非法的文件GUID和本地ID，则引用本身会被保留，但实际对象不会被加载。在Unity编辑器中表现为“（空）”引用。在运行的应用程序中，或场景视图里，“（空）”对象通常以多种方式表示，这取决于丢失对象的类型：网格会变得不可见，纹理呈现为洋红色等等。</p>
<h3 id="对象被卸载的三种情况"><a href="#对象被卸载的三种情况" class="headerlink" title="对象被卸载的三种情况"></a>对象被卸载的三种情况</h3><p>对象被卸载有以下三种情况：</p>
<ol>
<li>闲置资源清理进程开始后，一些对象会被自动卸载。该过程通常会在切换场景切不保留原场景（例如调用了非叠加的场景切换API <a href="http://docs.unity3d.com/ScriptReference/Application.LoadLevel.html?_ga=1.216561301.2098911022.1464579255" target="_blank" rel="external">Application.LoadLevel</a>），或者脚本中调用了<a href="http://docs.unity3d.com/ScriptReference/Resources.UnloadUnusedAssets.html?_ga=1.216561301.2098911022.1464579255" target="_blank" rel="external">Resources.UnloadUnusedAssets</a>时自动触发。该进程仅卸载没有被引用的对象：对象仅在Mono变量不存在对其的引用，且不存在引用该对象的其他活动对象时被卸载。</li>
<li>Resources目录中的对象可以通过调用<a href="http://docs.unity3d.com/ScriptReference/Resources.UnloadAsset.html?_ga=1.216561301.2098911022.1464579255" target="_blank" rel="external">Resources.UnloadAsset</a> API主动卸载。卸载后对象的实例ID会保持可用状态，对文件GUID和本地ID的条目会被保留且仍然有效。如果有Mono变量或其他有指向该对象的活动对象引用了被<a href="http://docs.unity3d.com/ScriptReference/Resources.UnloadAsset.html?_ga=1.246716935.2098911022.1464579255" target="_blank" rel="external">Resources.UnloadAsset</a>卸载的对象，则该对象会在任意有效的引用被解引用时立刻重新加载。</li>
<li>调用<a href="http://docs.unity3d.com/ScriptReference/AssetBundle.Unload.html?_ga=1.246716935.2098911022.1464579255" target="_blank" rel="external">AssetBundle.Unload(true)</a> API时，加载自AssetBundle的对象会被立刻自动卸载。该操作会释放对象实例ID的文件GUID和本地ID引用，任何对卸载对象的引用都会变成“（空）”引用。C#脚本中，任何试图访问已卸载对象上的方法和属性都会导致抛出空引用异常（NullReferenceException）。</li>
</ol>
<p>如果调用了<a href="http://docs.unity3d.com/ScriptReference/AssetBundle.Unload.html?_ga=1.142447025.2098911022.1464579255" target="_blank" rel="external">AssetBundle.Unload(false)</a>，被卸载的AssetBundle中仍然处于激活状态的对象不会被回收，但Unity会释放其实例ID的文件GUID和本地GUID引用。之后假如它们被从内存中卸载，只剩下对这些被卸载对象额引用，Unity无法再次重新加载这些对象(4)。</p>
<h2 id="1-8-载入大型结构树（Hierarchies）"><a href="#1-8-载入大型结构树（Hierarchies）" class="headerlink" title="1.8.载入大型结构树（Hierarchies）"></a>1.8.载入大型结构树（Hierarchies）</h2><p>当序列化含有大量Unity游戏对象的结构树时（例如序列化Prefab），要记住一点，即整个结构树都会被完全序列化。这就是说，结构树中的每一个游戏对象和组件都会在序列化数据中单独表示。这会对游戏对象结构的载入与实例化的耗时带来有趣的影响。</p>
<p>假设一个代码块实例化了一定数量的游戏对象，结构树非常庞大的单个Prefab的实例化，会比分别实例化结构树的多个模块然后运行时组合花费更多的CPU时间。</p>
<p>深度分析底层数据后发现，实例化和唤醒游戏对象所花费的CPU时间在各种情况下大致是相同的，单个独立的Prefab的实例化和唤醒仅需非常少量的CPU时间（因为不需要tranmpolining和SendTransformChanged回调）。但是，这些细小的时间节省相对于花在读取和序列化数据上的时间是很不值的。</p>
<p>正如之前提到的，序列化单独的Prefab时，每个游戏对象和其组件都会被分开序列化——即便数据是重复的。一个有30个独立元素的UI界面中，Unity会为这些元素序列化30次，这就会产生大量的序列化数据。载入时，所有30个重复元素的游戏对象和组件在被转化为新实例对象之前都需要从硬盘中进行读取。正是这里讨论的读取时间决定了实例化大型Prefab的性能花销。</p>
<p>Unity支持嵌套Prefab之后，对于有载入大型结构体游戏对象需求的工程而言，要想减少这类工程的载入时间，可以考虑将大型Prefab中的可重用元素分开存储到不同的Prefab中，并在运行时对它们进行实例化，而不是完全依靠Unity的序列化和Prefab系统。</p>
<h2 id="Footnotes-脚注"><a href="#Footnotes-脚注" class="headerlink" title="Footnotes(脚注)"></a>Footnotes(脚注)</h2><ol>
<li><p>在文件中，本地ID是唯一的。即在一个资源文件中，里面包含的本地ID都是不重复的。</p>
</li>
<li><p>在内部，这种缓存被称为PersistentManager。实际的转换工作在在Unity的C++ Remapper类中进行，Remapper类没有提供任何C# API调用接口。</p>
</li>
<li><p>运行时创建资源的示例是在脚本中创建Texture2D对象：<code>var myTexture = new Texture2D(1027, 768);</code></p>
</li>
<li><p>程序运行时对象并没有被卸载却被从内存中移除的情况通常会发生在Unity失去了对图形内容的控制的时候。例如，当手机应用被挂起并被强制在后台运行。这种情况下，手机操作系统通常会将所有的图形资源从GPU显存中强行卸载。之后APP再回到前台运行时，Unity不得不重新向GPU上传需要的材质、着色器和网格数据，以便恢复场景的正常渲染。</p>
</li>
</ol>
<hr>
<p>到此整个Unity内部资源管理与对象引用及序列化的内容就结束了，希望看完本文的你对如何合理分配Unity项目结构都有了比较清晰的概念。</p>
<p>原文链接：<a href="http://unity3d.com/cn/learn/tutorials/topics/best-practices/assets-objects-and-serialization?playlist=30089" target="_blank" rel="external">http://unity3d.com/cn/learn/tuto … tion?playlist=30089</a><br>感谢Unity官方翻译组成员“E.A.S”对本文翻译所做的贡献。<br>转载请注明来源：Unity官方中文社区 (<a href="http://forum.china.unity3d.com/thread-20129-1-1.html" target="_blank" rel="external">forum.china.unity3d.com</a>)。请勿私自更改任何版权说明信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将从Unity编辑器和运行时两个角度出发，主要探讨以下两方面内容：&lt;strong&gt;Unity序列化系统内部细节&lt;/strong&gt;以及&lt;strong&gt;Unity如何维护不同对象之间的强引用&lt;/strong&gt;。另外还会讨论对象与资源的技术实现差别。&lt;/p&gt;
&lt;p&gt;译注：除非特别说明，下文中所有的“资源”均指代“Asset”。&lt;/p&gt;
&lt;p&gt;本文内容是理解在Unity中如何高效加载和卸载资源的基础。正确的资源管理对缩短加载时间并减少内存占用来说至关重要。之前已经介绍了 &lt;em&gt;&lt;a href=&quot;http://www.cnblogs.com/zhaoqingqing/p/5823927.html&quot;&gt;上半部分&lt;/a&gt;&lt;/em&gt;，今天继续为大家分享下半部分内容。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity3D项目日志" scheme="https://zhaoqingqing.github.io/categories/Unity3D%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Unity3D" scheme="https://zhaoqingqing.github.io/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>玩转Unity资源，对象和序列化(上)</title>
    <link href="https://zhaoqingqing.github.io/2016/08/30/unity_assets_object_serialization_1.html"/>
    <id>https://zhaoqingqing.github.io/2016/08/30/unity_assets_object_serialization_1.html</id>
    <published>2016-08-30T14:05:25.000Z</published>
    <updated>2016-10-23T09:02:41.811Z</updated>
    
    <content type="html"><![CDATA[<p>这是一系列文章中的第二章，覆盖了<a href="https://unity3d.com/learn/tutorials/topics/best-practices/guide-asset-bundles-and-resources" target="_blank" rel="external">Unity5的Assets，Resources和资源管理</a></p>
<p>本文将从Unity编辑器和运行时两个角度出发，主要探讨以下两方面内容：<strong>Unity序列化系统内部细节</strong>以及<strong>Unity如何维护不同对象之间的强引用</strong>。另外还会讨论对象与资源的技术实现差别。</p>
<p>译注：除非特别说明，下文中所有的“资源”均指代“Asset”。</p>
<p><strong>本文内容是理解在Unity中如何高效加载和卸载资源的基础。正确的资源管理对缩短加载时间并减少内存占用来说至关重要</strong>。今天先为大家分享上半部分内容。<br><a id="more"></a></p>
<h2 id="1-1-深入理解资源和对象"><a href="#1-1-深入理解资源和对象" class="headerlink" title="1.1. 深入理解资源和对象"></a>1.1. 深入理解资源和对象</h2><p>在理解Unity如何确保万无一失地管理数据之前，首先要知道Unity是如何识别并序列化数据的。首先第一点，要正确区分资源（<strong>Asset</strong>）和对象（<strong>UnityEngine.Objects</strong>）。</p>
<h3 id="Asset"><a href="#Asset" class="headerlink" title="Asset"></a>Asset</h3><p>资源（Asset）是硬盘中的文件，存储在Unity工程的Assets文件夹内。例如，纹理（Texture），材质（Material）和FBX文件等，它们都是资源。一些资源的数据格式是Unity原生支持的，例如材质。有些资源则需要转换为原生的数据格式后才能被Unity使用，例如FBX文件。</p>
<h3 id="UnityEngine-Object"><a href="#UnityEngine-Object" class="headerlink" title="UnityEngine.Object"></a>UnityEngine.Object</h3><p><a href="http://docs.unity3d.com/ScriptReference/Object.html?_ga=1.146782647.2098911022.1464579255" target="_blank" rel="external">UnityEngine.Object</a>，或者说以大写字母O开头的Object——对象，代表序列化数据的集合，表示某个资源的具体实例。它可以是Unity引擎使用的任何类型的资源，例如网格，Sprite，音频剪辑或动画剪辑。所有的对象（Object）都是UnityEngine.Object基类的子类。</p>
<h3 id="特殊的Object类型"><a href="#特殊的Object类型" class="headerlink" title="特殊的Object类型"></a>特殊的Object类型</h3><p>几乎所有的对象（Object）类型都是内建的，其中有两种比较特殊的类型。</p>
<ol>
<li><strong><a href="http://docs.unity3d.com/ScriptReference/ScriptableObject.html?_ga=1.146782647.2098911022.1464579255" target="_blank" rel="external">ScriptableObject</a></strong>为开发者提供了一套便捷的系统，供开发者自定义数据类型。这些类型可以被Unity直接序列化或反序列化，并在Unity编辑器的检视器窗口中进行操作。</li>
<li><strong><a href="http://docs.unity3d.com/ScriptReference/MonoBehaviour.html?_ga=1.217438613.2098911022.1464579255" target="_blank" rel="external">MonoBehaviour</a></strong>提供了链接<a href="http://docs.unity3d.com/ScriptReference/MonoScript.html?_ga=1.217438613.2098911022.1464579255" target="_blank" rel="external">MonoScript</a>的容器。MonoScript是一种内部数据类型，Unity用它保存对某个特定程序集和命名空间中特定脚本类的引用，MonoScript本身不包含任何实际的可执行代码。</li>
</ol>
<h3 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h3><p>资源（Asset）与对象（Object）是一种一对多的关系，即一个资源文件可能会包括多个Object。</p>
<h2 id="1-2-对象之间的引用"><a href="#1-2-对象之间的引用" class="headerlink" title="1.2. 对象之间的引用"></a>1.2. 对象之间的引用</h2><p>所有UnityEngine.Objects都可以引用其他的UnityEngine.Objects。这里“其他的Object”可能存在于相同的资源文件中，或需要从其他资源文件导入。例如，一个材质Object通常有一个或多个纹理Object的引用。这些纹理Object一般是从一个或多个纹理资源文件中导入的（例如PNG或JPG文件）。</p>
<p>序列化后，这些引用由两部分数据组成：文件GUID和本地ID。文件GUID用于识别资源（Asset）文件中目标资源（Resource）的存储位置。而本地唯一(1)的ID负责识别单个资源文件中的Object，因为一个资源文件可能会包含多个Object。</p>
<h3 id="文件GUID-meta"><a href="#文件GUID-meta" class="headerlink" title="文件GUID(.meta)"></a>文件GUID(.meta)</h3><p>文件GUID存储于.meta文件中。Unity会在首次导入资源文件时生成.meta文件，并和资源文件一起存储在相同的目录中。</p>
<p>上述的识别和引用系统可以使用文本编辑器查看：</p>
<ol>
<li>创建一个全新的Unity工程，更改编辑器设置，将<strong>Edit</strong> - <strong>Project Settings</strong>  -  <strong>Editor</strong>中的<strong>Version Control</strong>设为<strong>Visible Meta Files</strong>，并将<strong>Asset Serialization</strong>设为文本。</li>
<li>新建材质并向工程中导入一个纹理。将材质赋给场景中的一个立方体，保存场景。</li>
</ol>
<p>使用文本编辑器打开这个材质对应的.meta文件。在文件顶端附近会有一行被标示为“guid”，该行定义了材质资源文件的文件GUID。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">fileFormatVersion:</span> <span class="number">2</span></div><div class="line"><span class="attr">guid:</span> <span class="number">6839</span>b719d14310c4f945de352bac3767</div><div class="line"><span class="attr">timeCreated:</span> <span class="number">1472566765</span></div><div class="line"><span class="attr">licenseType:</span> Pro</div><div class="line"><span class="attr">NativeFormatImporter:</span></div><div class="line"><span class="attr">  userData:</span> </div><div class="line"><span class="attr">  assetBundleName:</span> </div><div class="line"><span class="attr">  assetBundleVariant:</span></div></pre></td></tr></table></figure>
<h3 id="本地ID-具体文件"><a href="#本地ID-具体文件" class="headerlink" title="本地ID(具体文件)"></a>本地ID(具体文件)</h3><p>如需查看本地ID，使用文本编辑器打开材质文件，材质Object的定义大致如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">%YAML <span class="number">1.1</span></div><div class="line">%TAG !u! tag:unity3d.com,<span class="number">2011</span>:</div><div class="line"><span class="bullet">-</span>-- !u!<span class="number">21</span> &amp;<span class="number">2100000</span></div><div class="line"></div><div class="line"><span class="attr">Material:</span></div><div class="line"></div><div class="line"><span class="attr">serializedVersion:</span> <span class="number">6</span></div><div class="line"></div><div class="line">... more data ...</div></pre></td></tr></table></figure>
<p>在上面的例子中，前面有&amp;符号的数字就是材质的本地ID。如果这个材质的Object位于一个文件GUID为“abcdefg”的资源文件中，则该材质Object的唯一识别符就是文件GUID“abcdefg”和本地ID“2100000”的组合。</p>
<h2 id="1-3-为什么要用文件GUID和本地ID？"><a href="#1-3-为什么要用文件GUID和本地ID？" class="headerlink" title="1.3. 为什么要用文件GUID和本地ID？"></a>1.3. 为什么要用文件GUID和本地ID？</h2><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>在Unity中，为什么要使用文件GUID和本地ID这套系统呢？答案是为稳定服务，也是为了提供一套灵活的、无关具体平台的工作流程。文件GUID提供了文件存储位置的抽象，这样一个文件GUID就对应一个具体的文件，这个具体的文件存储在什么位置也就无关紧要了。因此我们才能随意移动这个文件而不破坏所有相关Object对这个文件的引用。</p>
<p>任何资源（Asset）文件中都可能含有（或通过导入产生）多个UnityEngine.Object资源（Resource），因此需要一个本地ID来对其中的Object做明确区分。</p>
<p>如果与资源文件相关联的文件GUID丢失，则所有对该资源文件中的Object的引用都会被破坏。这就是必须保证.meta文件具有和资源文件相同的文件名并存储在同一目录下的原因。注意Unity会重新生成丢失或被删除的.meta文件。</p>
<h3 id="Unity编辑器维护映射表"><a href="#Unity编辑器维护映射表" class="headerlink" title="Unity编辑器维护映射表"></a>Unity编辑器维护映射表</h3><p>Unity编辑器负责维护一张文件路径与文件GUID之间关系的映射表。只要资源文件被读取或导入，这个映射关系就会被建立，映射会将资源的具体位置和资源的文件GUID进行关联。Unity编辑器处于打开状态时，假设一个文件的.meta意外丢失，并且该资源文件的路径没有改变，编辑器可以保证这个资源会被分配到相同的文件GUID。</p>
<p>如果在Unity编辑器处于关闭状态时丢失.meta文件，或资源文件被移动但没有移动对应的.meta文件时，所有对资源文件中的Object的引用都会丢失。</p>
<h2 id="1-4-复合资源和导入器"><a href="#1-4-复合资源和导入器" class="headerlink" title="1.4. 复合资源和导入器"></a>1.4. 复合资源和导入器</h2><h3 id="资源导入器"><a href="#资源导入器" class="headerlink" title="资源导入器"></a>资源导入器</h3><p>正如前面深入理解资源与对象中所说的一样，不能被Unity直接支持的<a href="https://unity3d.com/cn/learn/tutorials/topics/best-practices/assets-objects-and-serialization?playlist=30089#Inside_Assets_and_Objects" target="_blank" rel="external">资源类型</a>必须经过导入才可以使用——使用资源导入器来完成。这些导入器是自动调用的，您也可以使用<a href="http://docs.unity3d.com/ScriptReference/AssetImporter.html?_ga=1.200234669.2098911022.1464579255" target="_blank" rel="external">AssetImporter</a>在脚本中调用API及其子类。例如，在导入单独的纹理资源例如PNG和JPG时，<a href="http://docs.unity3d.com/ScriptReference/TextureImporter.html?_ga=1.200234669.2098911022.1464579255" target="_blank" rel="external">TextureImporter</a> API提供了导入时要使用的相关设置的访问。</p>
<p>导入过程最终的产物是一系列UnityEngine.Object。在Unity编辑器中，这些对象会具体表现为父资源下的多个子资源，例如作为Sprite Atlas导入的纹理材质，其下属会有多个嵌套的Sprite。每一个对象都会使用相同的文件GUID，因为它们的源数据都存储在同一个资源文件中。它们在纹理资源中的具体区分工作则使用本地ID来完成。</p>
<h3 id="Library文件夹"><a href="#Library文件夹" class="headerlink" title="Library文件夹"></a>Library文件夹</h3><p>导入过程中会将源资源转换为匹配Unity编辑器中选定的目标平台的格式。导入过程可能会牵涉一些重量级操作，例如纹理压缩。如果每次打开Unity编辑器时都要执行这些操作，那效率就太低了。</p>
<p>为了解决这一问题，我们将资源导入的结果缓存在Library文件夹中。具体就是，导入进程的结果将会存储在以资源文件GUID头两位作为名称的文件夹中。这些文件夹位于 <strong>Library/metadata/</strong> 目录下。各个不同的对象会被序列化后存储在一个二进制文件中，文件使用资源文件的GUID来命名。</p>
<p>这对所有资源都是一样的，不仅仅是非原生资源。只不过Unity原生支持的资源不需要对其进行转换或序列化处理。</p>
<p>上半部分的内容主要介绍了资源（Asset）和对象（UnityEngine.Objects）的区别，以及文件GUID和本地ID二者的关联和差异。下半部分将为大家介绍第三种ID：对象的实例ID，并看看这些ID对资源在内存与显存中的加载和卸载分别有着怎样的作用。</p>
<h2 id="Footnotes-脚注"><a href="#Footnotes-脚注" class="headerlink" title="Footnotes(脚注)"></a>Footnotes(脚注)</h2><ol>
<li>在文件中，本地ID是唯一的。即在一个资源文件中，里面包含的本地ID都是不重复的。</li>
<li>在内部，这种缓存被称为PersistentManager。实际的转换工作在在Unity的C++ Remapper类中进行，Remapper类没有提供任何C# API调用接口。</li>
<li>运行时创建资源的示例是在脚本中创建Texture2D对象：<code>var myTexture = new Texture2D(1027, 768);</code></li>
<li>程序运行时对象并没有被卸载却被从内存中移除的情况通常会发生在Unity失去了对图形内容的控制的时候。例如，当手机应用被挂起并被强制在后台运行。这种情况下，手机操作系统通常会将所有的图形资源从GPU显存中强行卸载。之后APP再回到前台运行时，Unity不得不重新向GPU上传需要的材质、着色器和网格数据，以便恢复场景的正常渲染。</li>
</ol>
<hr>
<p>到此整个Unity内部资源管理与对象引用及序列化的内容就结束了，希望看完本文的你对如何合理分配Unity项目结构都有了比较清晰的概念。</p>
<p>原文链接：<a href="http://unity3d.com/cn/learn/tutorials/topics/best-practices/assets-objects-and-serialization?playlist=30089" target="_blank" rel="external">http://unity3d.com/cn/learn/tuto … tion?playlist=30089</a><br>感谢Unity官方翻译组成员“E.A.S”对本文翻译所做的贡献。<br>转载请注明来源：Unity官方中文社区 (<a href="http://forum.china.unity3d.com/thread-20129-1-1.html" target="_blank" rel="external">forum.china.unity3d.com</a>)。请勿私自更改任何版权说明信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一系列文章中的第二章，覆盖了&lt;a href=&quot;https://unity3d.com/learn/tutorials/topics/best-practices/guide-asset-bundles-and-resources&quot;&gt;Unity5的Assets，Resources和资源管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文将从Unity编辑器和运行时两个角度出发，主要探讨以下两方面内容：&lt;strong&gt;Unity序列化系统内部细节&lt;/strong&gt;以及&lt;strong&gt;Unity如何维护不同对象之间的强引用&lt;/strong&gt;。另外还会讨论对象与资源的技术实现差别。&lt;/p&gt;
&lt;p&gt;译注：除非特别说明，下文中所有的“资源”均指代“Asset”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文内容是理解在Unity中如何高效加载和卸载资源的基础。正确的资源管理对缩短加载时间并减少内存占用来说至关重要&lt;/strong&gt;。今天先为大家分享上半部分内容。&lt;br&gt;
    
    </summary>
    
      <category term="Unity3D项目日志" scheme="https://zhaoqingqing.github.io/categories/Unity3D%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Unity3D" scheme="https://zhaoqingqing.github.io/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>便捷的方式在手机上查看Unity3D的Console Log</title>
    <link href="https://zhaoqingqing.github.io/2016/08/19/unity-logs-viewer_(viewlog_inmobile).html"/>
    <id>https://zhaoqingqing.github.io/2016/08/19/unity-logs-viewer_(viewlog_inmobile).html</id>
    <published>2016-08-19T13:21:34.148Z</published>
    <updated>2016-08-21T15:35:11.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Logs-Viewer"><a href="#Logs-Viewer" class="headerlink" title="Logs Viewer"></a>Logs Viewer</h2><h3 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h3><p>Using this tool you can easily check your editor console logs inside the game itself! No need to go back to the project and do any tests to track the problems!</p>
<p>使用此工具，不管在手机或者Unity Editor中，你都可以很容易地检查/查看游戏输出的日志，而不需要回到项目和做任何测试跟踪问题!</p>
<a id="more"></a>
<h3 id="开启方法"><a href="#开启方法" class="headerlink" title="开启方法"></a>开启方法</h3><p>All what you have to do is to make a circle gesture using your mouse (click and drag) or your finger (touch and drag) on the mobile screen to show all these logs!</p>
<p>那要怎样显示此日志呢？在PC/MAC等桌面平台，你需要使用鼠标按住并画圈圈，在Mobile平台上，你需要使用手指画圈圈就可以显示日志了</p>
<h3 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h3><p>To setup log viewer do the following</p>
<ol>
<li>create reporter from menu (Reporter-&gt;Create) at first scene your game start .</li>
<li>then set the ” Scrip execution order ” in (Edit -&gt; Project Settings ) of Reporter.cs to be the highest.</li>
</ol>
<p>设置步骤</p>
<ol>
<li>在游戏的主场景(首次启动的Scene)，点击菜单栏 <strong>Reporter</strong> — <strong>Create</strong>，将会在场景中创建一个<strong>Reporter</strong>的Gameobject上绑定了<strong>Reporter</strong>和<strong>ReporterMessageReceiver</strong>脚本</li>
<li>点击 <strong>Edit</strong> — <strong>Project Settings</strong> —<strong>Scrip Execution Order</strong>，在打开的MonoManager中，点击+号,添加Reporter</li>
</ol>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>AssetStore: <a href="https://www.assetstore.unity3d.com/en/#!/content/12047" target="_blank" rel="external">https://www.assetstore.unity3d.com/en/#!/content/12047</a></p>
<p>GitHub: <a href="https://github.com/aliessmael/Unity-Logs-Viewer/" target="_blank" rel="external">https://github.com/aliessmael/Unity-Logs-Viewer/</a></p>
<p>插件自带的文档：导入资源后在 <code>Reporter/Documentation/index.html</code></p>
<p>或参考：<a href="https://github.com/zhaoqingqing/blog_samplecode/tree/master/unity_protobuf_sample/Assets/Reporter" target="_blank" rel="external">https://github.com/zhaoqingqing/blog_samplecode/tree/master/unity_protobuf_sample/Assets/Reporter</a></p>
<h2 id="改进或建议"><a href="#改进或建议" class="headerlink" title="改进或建议"></a>改进或建议</h2><p>本文基于插件的1.6版本 (2016-06-13发布)，Unity 5.3.4f1 运行正常。</p>
<h3 id="修改开启圈数"><a href="#修改开启圈数" class="headerlink" title="修改开启圈数"></a>修改开启圈数</h3><p>在<strong>Reporter</strong> 属性面板，修改 <strong>Num of Circle to Sh</strong> 的数值为其它，默认为1</p>
<h3 id="开启时禁用NGUI的输入"><a href="#开启时禁用NGUI的输入" class="headerlink" title="开启时禁用NGUI的输入"></a>开启时禁用NGUI的输入</h3><p>如果想在开启日志窗口时，禁用NGUI的Input，可以使用添加以下。在ReporterMessageReceiver.cs</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnHideReporter</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">        <span class="comment">//TO DO : resume your game</span></div><div class="line">        <span class="comment">//NOTE if use ngui enable input</span></div><div class="line">        <span class="comment">//if (UICamera.eventHandler != null)</span></div><div class="line">        <span class="comment">//&#123;</span></div><div class="line">        <span class="comment">//    UICamera.eventHandler.useMouse = true;</span></div><div class="line">        <span class="comment">//    UICamera.eventHandler.useTouch = true;</span></div><div class="line">        <span class="comment">//&#125;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnShowReporter</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">        <span class="comment">//TO DO : pause your game and disable its GUI</span></div><div class="line">        <span class="comment">//NOTE if use ngui disable input</span></div><div class="line">        <span class="comment">//if (UICamera.eventHandler != null)</span></div><div class="line">        <span class="comment">//&#123;</span></div><div class="line">        <span class="comment">//    UICamera.eventHandler.useMouse = false;</span></div><div class="line">        <span class="comment">//    UICamera.eventHandler.useTouch = false;</span></div><div class="line">        <span class="comment">//&#125;</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="其它注意事项"><a href="#其它注意事项" class="headerlink" title="其它注意事项"></a>其它注意事项</h3><p><a href="http://www.maosongliang.com/archives/175" target="_blank" rel="external">亮兄此文中提到</a>，如果场景是使用Assetbundle加载的话，把用到 string[] scenes ;的地方进行了屏蔽(注释)</p>
<p>我并没有详细测试使用ab场景的情况，我是通过判空来避免异常的出现，查看我的修改：<a href="https://github.com/zhaoqingqing/blog_samplecode/commit/f0eb5045cd9aa1bda7efe257647e885f6367ed14" target="_blank" rel="external">https://github.com/zhaoqingqing/blog_samplecode/commit/f0eb5045cd9aa1bda7efe257647e885f6367ed14</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Logs-Viewer&quot;&gt;&lt;a href=&quot;#Logs-Viewer&quot; class=&quot;headerlink&quot; title=&quot;Logs Viewer&quot;&gt;&lt;/a&gt;Logs Viewer&lt;/h2&gt;&lt;h3 id=&quot;功能描述&quot;&gt;&lt;a href=&quot;#功能描述&quot; class=&quot;headerlink&quot; title=&quot;功能描述&quot;&gt;&lt;/a&gt;功能描述&lt;/h3&gt;&lt;p&gt;Using this tool you can easily check your editor console logs inside the game itself! No need to go back to the project and do any tests to track the problems!&lt;/p&gt;
&lt;p&gt;使用此工具，不管在手机或者Unity Editor中，你都可以很容易地检查/查看游戏输出的日志，而不需要回到项目和做任何测试跟踪问题!&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>页游微端多平台/渠道</title>
    <link href="https://zhaoqingqing.github.io/2016/08/14/webgame_muilt_channel_publish&amp;buildtool.html"/>
    <id>https://zhaoqingqing.github.io/2016/08/14/webgame_muilt_channel_publish&amp;buildtool.html</id>
    <published>2016-08-14T10:23:25.000Z</published>
    <updated>2016-08-14T13:40:03.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="页游微端的几个问题及解答"><a href="#页游微端的几个问题及解答" class="headerlink" title="页游微端的几个问题及解答"></a>页游微端的几个问题及解答</h2><h3 id="为什么要开发游戏微游？"><a href="#为什么要开发游戏微游？" class="headerlink" title="为什么要开发游戏微游？"></a>为什么要开发游戏微游？</h3><p>众所周知，Google大佬的Chrome浏览器在2015年时停止支持NPAPI，unity3d引擎的web player也是NPAPI的范畴，而我司的3D网页游戏正是使用unity3d引擎的web player，所以在Chrome 45及之后版本将打开我们的游戏。</p>
<a id="more"></a>
<h3 id="微端版是导出windows平台而不是web-player"><a href="#微端版是导出windows平台而不是web-player" class="headerlink" title="微端版是导出windows平台而不是web player?"></a>微端版是导出windows平台而不是web player?</h3><p>正是如此，下载微端玩的正是导出game.exe+game_Data而不是webplayer.unity3d+html，简单点来说: 通过下载微端玩游戏其实是客户端游戏(端游)，而通过网页入口玩游戏还是unity web player.</p>
<h3 id="为什么微端不是内嵌网页而是客户端游戏？"><a href="#为什么微端不是内嵌网页而是客户端游戏？" class="headerlink" title="为什么微端不是内嵌网页而是客户端游戏？"></a>为什么微端不是内嵌网页而是客户端游戏？</h3><p>这个问题问的好！</p>
<p>假如是内嵌网页，那么玩家的还是要已安装unity web player才能进入游戏(网页插件类似flash)</p>
<p>客户端游戏无需安装web player插件，且端游可以利用更多系统性能，比如多线程，保存资源到本地等</p>
<h3 id="为什么要做多平台-渠道打包功能？"><a href="#为什么要做多平台-渠道打包功能？" class="headerlink" title="为什么要做多平台/渠道打包功能？"></a>为什么要做多平台/渠道打包功能？</h3><p>我司U3D开发的大型3DMMORPG网页游戏，先后在腾讯，49游上线，近期内将和更多渠道和平台联运，包括多玩(yy)，37玩，爱乐玩等。</p>
<p>微端登录和充值的流程</p>
<ol>
<li>微端登录器 ——&gt; 登录渠道——&gt;回调游戏服务器 ——&gt;启动并进入游戏</li>
<li>游戏内充值——&gt; 跳到渠道的充值接口——&gt;回调游戏服务器——&gt;向游戏发放道具</li>
</ol>
<p><strong>1. 代理商和策划提出的需求</strong></p>
<ul>
<li>腾讯的游戏版本是1.1</li>
<li>多玩的版本是1.2</li>
<li>49游的版本是1.3</li>
</ul>
<p>所以游戏资源需要进行分渠道管理，代码也进行分支版本管理。</p>
<p><strong>2. 不同渠道/平台的微端有什么区别？</strong></p>
<ul>
<li>腾讯渠道：ab资源+代码，微端登录页QQ空间，支付是跳转到广点通</li>
<li>49游渠道：ab资源+代码，微端登录页平台分配的游戏入口，支付是跳转到49游充值</li>
<li>多玩渠道：ab资源+代码，微端登录页yy登录，支付是跳转到yy游戏充值中心</li>
<li>爱 乐 玩  ：ab资源+代码，微端登录页平台分配的游戏入口，支付是跳转到爱乐玩充值</li>
</ul>
<p><strong>3. 多平台要做的事</strong></p>
<p>从上述2中可以看出，不同的渠道对应不同的微端以应付差异化，目前来说资源路径，代码，登录，充值链接等一些配置信息上的差异，当然每个渠道微端的外观也可能有差异</p>
<p>微端的技术分析请阅读：<a href="http://www.cnblogs.com/zhaoqingqing/p/5671398.html" target="_blank" rel="external"><a href="http://www.cnblogs.com/zhaoqingqing/p/5671398.html" target="_blank" rel="external">http://www.cnblogs.com/zhaoqingqing/p/5671398.html</a></a></p>
<h2 id="多渠道思路分析"><a href="#多渠道思路分析" class="headerlink" title="多渠道思路分析"></a>多渠道思路分析</h2><h3 id="思路1-单母包-安装器-配置表"><a href="#思路1-单母包-安装器-配置表" class="headerlink" title="思路1.单母包+安装器+配置表"></a>思路1.单母包+安装器+配置表</h3><p>微端只打包一次，安装器打包多次，每个平台/渠道有自己的专属配置文件</p>
<p><strong>如何识别微端的渠道？</strong></p>
<p>微端启动时读取目录中的配置文件识别当前平台，并将参数传递给游戏客户端</p>
<p><strong>如何发布不同渠道的微端？</strong></p>
<ul>
<li><p>A渠道 = 母包 + A渠道配置文件 + A渠道安装器</p>
</li>
<li><p>B渠道 = 母包 + B渠道配置文件 + B渠道安装器</p>
</li>
<li><p>N渠道 = 母包 + N渠道配置文件 + N渠道安装器</p>
</li>
</ul>
<p><strong>微端母包有那些文件？</strong></p>
<ul>
<li>fileupdate : 检查更新程序</li>
<li>launcher:  游戏登录器/启动器</li>
<li>uninst : 卸载程序</li>
<li>unity pc game : unity 导出的windows程序，包含游戏的初始资源及配置文件</li>
</ul>
<p>更多微端的技术分析请阅读：<a href="http://www.cnblogs.com/zhaoqingqing/p/5671398.html" target="_blank" rel="external">http://www.cnblogs.com/zhaoqingqing/p/5671398.html</a></p>
<h3 id="思路2-打多次包-宏定义"><a href="#思路2-打多次包-宏定义" class="headerlink" title="思路2.打多次包 宏定义"></a>思路2.打多次包 宏定义</h3><p>把渠道的配置信息写在代码中，通过宏定义区分不同的渠道，但需要打包多次</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	     <span class="keyword">string</span> loginURL = <span class="string">""</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> you49</span></div><div class="line">		loginURL = http:<span class="comment">//ylxxz.49you.com/client_login.html</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> ewan21</span></div><div class="line">		loginURL = http:<span class="comment">//www.2lewan.com/client/ylxxz</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> duowan</span></div><div class="line">		loginURL = http:<span class="comment">//www.duowan.com/ylxxz</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p><strong>如何识别微端的渠道？</strong></p>
<p>答：微端启动时，通过代码中的宏定义识别识别当前平台，并将参数传递给游戏客户端</p>
<p><strong>如何发布不同渠道的微端？</strong></p>
<ul>
<li>A渠道 = 打包A渠道包</li>
<li>A渠道 = 打包B渠道包</li>
<li>N渠道 = 打包N渠道包</li>
</ul>
<h2 id="我的解决方案"><a href="#我的解决方案" class="headerlink" title="我的解决方案"></a>我的解决方案</h2><p>经过思考后我使用思路1<strong>母包+配置表</strong> (注意点：针对不同的渠道，安装器需要重新打包)</p>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>自己编写简易的多渠道打包工具，打包工具主要功能及界面如下</p>
<ul>
<li>主界面：自动编译母包+安装器</li>
<li>渠道选择：从列表选择渠道，程序自动验证渠道配置信息并提供预览</li>
<li>打包结果：记录并显示打包结果</li>
</ul>
<h3 id="项目设定"><a href="#项目设定" class="headerlink" title="项目设定"></a>项目设定</h3><p>打包工具结合项目的配置信息，进行多渠道打包，项目工程目录如下</p>
<ul>
<li>微端母包 源代码</li>
<li>微端安装器 源代码</li>
<li><p>各个平台/渠道 配置文件 /channel_configs  里面的文件如下</p>
<ul>
<li>49you.json</li>
<li>2lewan.json</li>
<li>duowan.json</li>
<li>37wan.json</li>
</ul>
</li>
<li><p>打包后的渠道文件存放位置 /channel_packages</p>
<ul>
<li>/49you</li>
<li>/2lewan</li>
<li>/duowan</li>
<li>/37wan</li>
</ul>
</li>
</ul>
<h3 id="安装器打包思路"><a href="#安装器打包思路" class="headerlink" title="安装器打包思路"></a>安装器打包思路</h3><ol>
<li>合并安装器+配置文件</li>
<li>vs打包配置(xml)</li>
<li>配置信息写在代码中，打包时替换代码文件或动态生成代码文件</li>
</ol>
<h3 id="思路1-安装器和config合并"><a href="#思路1-安装器和config合并" class="headerlink" title="思路1. 安装器和config合并"></a>思路1. 安装器和config合并</h3><p><strong>通过ilmerge合并文件</strong></p>
<p>只能合并.net assemblies ，不能合并txt等非.net类型文件</p>
<p><a href="http://www.microsoft.com/en-us/download/details.aspx?id=17630" target="_blank" rel="external">http://www.microsoft.com/en-us/download/details.aspx?id=17630</a></p>
<p><a href="https://ilmergegui.codeplex.com/" target="_blank" rel="external">https://ilmergegui.codeplex.com/</a></p>
<p><strong>通过配置文件创建纯资源dll</strong> </p>
<p><a href="https://msdn.microsoft.com/zh-cn/library/24b2tcy0%28VS.80%29.aspx?f=255&amp;MSPPError=-2147217396" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/24b2tcy0%28VS.80%29.aspx?f=255&amp;MSPPError=-2147217396</a></p>
<p>此方法觉得本末倒置了，所以决定使用msbuild来打包不同的安装器</p>
<h3 id="思路2-msbuild"><a href="#思路2-msbuild" class="headerlink" title="思路2. msbuild"></a>思路2. msbuild</h3><p>在 Visual Studio 中构建应用程序  <a href="https://msdn.microsoft.com/zh-cn/library/cyz1h6zd.aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/cyz1h6zd.aspx</a></p>
<p>msbuild: <a href="https://msdn.microsoft.com/zh-cn/library/dd393574.aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/dd393574.aspx</a></p>
<p>msbuild + xml (project.csproj)</p>
<h2 id="msbuild-打包"><a href="#msbuild-打包" class="headerlink" title="msbuild 打包"></a>msbuild 打包</h2><h3 id="条件编译符号-预编译宏"><a href="#条件编译符号-预编译宏" class="headerlink" title="条件编译符号(预编译宏)"></a>条件编译符号(预编译宏)</h3><p>项目解决方案：WinForm.sln，主要代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    public partial class Form1 : Form</div><div class="line">    &#123;</div><div class="line">        public Form1()</div><div class="line">        &#123;</div><div class="line">            InitializeComponent();</div><div class="line">            string channel = &quot;default&quot;;</div><div class="line">#if GooglePlay</div><div class="line">            channel=&quot;google play&quot;;</div><div class="line">#elif Samsung</div><div class="line">            channel=&quot;sam sung store&quot;;</div><div class="line">#elif AppStore</div><div class="line">            channel=&quot;app store&quot;;</div><div class="line">#endif</div><div class="line">            this.textBox1.Text = channel;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>假设当前要打包 googleplay渠道</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msbuild /m WinForm.sln /t:Rebuild /p:Configuration=Debug /p:DefineConstants=<span class="string">"GooglePlay"</span></div></pre></td></tr></table></figure>
<p>假设当前要打包 AppStore渠道</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msbuild /m WinForm.sln /t:Rebuild /p:Configuration=Debug /p:DefineConstants=<span class="string">"AppStore"</span></div></pre></td></tr></table></figure>
<p><code>/p:DefineConstants=&quot;AppStore&quot;</code>  指定宏</p>
<h3 id="proj配置文件分析"><a href="#proj配置文件分析" class="headerlink" title="proj配置文件分析"></a>proj配置文件分析</h3><p>*.proj (.net项目文件)，本质上是一个xml文件，在build时根据这里面的参数进行build</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span> <span class="attr">Condition</span>=<span class="string">" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">PlatformTarget</span>&gt;</span>AnyCPU<span class="tag">&lt;/<span class="name">PlatformTarget</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">DebugSymbols</span>&gt;</span>true<span class="tag">&lt;/<span class="name">DebugSymbols</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">DebugType</span>&gt;</span>full<span class="tag">&lt;/<span class="name">DebugType</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Optimize</span>&gt;</span>false<span class="tag">&lt;/<span class="name">Optimize</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">OutputPath</span>&gt;</span>bin\Debug\<span class="tag">&lt;/<span class="name">OutputPath</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">DefineConstants</span>&gt;</span>TRACE;DEBUG;AppStore<span class="tag">&lt;/<span class="name">DefineConstants</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ErrorReport</span>&gt;</span>prompt<span class="tag">&lt;/<span class="name">ErrorReport</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">WarningLevel</span>&gt;</span>4<span class="tag">&lt;/<span class="name">WarningLevel</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Prefer32Bit</span>&gt;</span>false<span class="tag">&lt;/<span class="name">Prefer32Bit</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="msbuild-文档资料"><a href="#msbuild-文档资料" class="headerlink" title="msbuild 文档资料"></a>msbuild 文档资料</h3><p>MSBuild 命令行参考  <a href="https://technet.microsoft.com/zh-cn/library/ms164311(v=vs.85" target="_blank" rel="external">https://technet.microsoft.com/zh-cn/library/ms164311(v=vs.85).aspx</a>.aspx)</p>
<p>msbuild-msdn : <a href="https://msdn.microsoft.com/zh-cn/library/dd393574.aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/dd393574.aspx</a></p>
<h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><p><strong>msbuild 不是内部或外部命令？</strong></p>
<p>起因：家里的机器上同时安装VS2013 ，VS15(2016) 莫名出现msbuild不是内部或外部命令</p>
<p>解决：C:\Program Files (x86)\MSBuild\12.0\Bin\  添加到环境变量的path中</p>
<p><strong>devenv 不是内部或外部命令？</strong></p>
<p>解决：C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\ 添加到环境变量的path中</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;页游微端的几个问题及解答&quot;&gt;&lt;a href=&quot;#页游微端的几个问题及解答&quot; class=&quot;headerlink&quot; title=&quot;页游微端的几个问题及解答&quot;&gt;&lt;/a&gt;页游微端的几个问题及解答&lt;/h2&gt;&lt;h3 id=&quot;为什么要开发游戏微游？&quot;&gt;&lt;a href=&quot;#为什么要开发游戏微游？&quot; class=&quot;headerlink&quot; title=&quot;为什么要开发游戏微游？&quot;&gt;&lt;/a&gt;为什么要开发游戏微游？&lt;/h3&gt;&lt;p&gt;众所周知，Google大佬的Chrome浏览器在2015年时停止支持NPAPI，unity3d引擎的web player也是NPAPI的范畴，而我司的3D网页游戏正是使用unity3d引擎的web player，所以在Chrome 45及之后版本将打开我们的游戏。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity3D项目日志" scheme="https://zhaoqingqing.github.io/categories/Unity3D%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Unity3D" scheme="https://zhaoqingqing.github.io/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>微软准备开源PowerShell</title>
    <link href="https://zhaoqingqing.github.io/2016/08/11/microsoft-powershell-opensource.html"/>
    <id>https://zhaoqingqing.github.io/2016/08/11/microsoft-powershell-opensource.html</id>
    <published>2016-08-11T13:06:24.801Z</published>
    <updated>2016-08-11T13:06:24.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微软有计划在近期内开源PowerShell"><a href="#微软有计划在近期内开源PowerShell" class="headerlink" title="微软有计划在近期内开源PowerShell"></a>微软有计划在近期内开源PowerShell</h2><p>近日微软再次在向开源投出橄榄枝， PowerShell是面向Windows和Windows Server的自动化平台和脚本语言，帮助用户简化系统的管理。在纳德拉的带领下微软也逐渐走向开放，根据相关爆料称微软有计划在近期内 开源该脚本语言。</p>
<p>知名Windows爆料人士WalkingCat和Tom Hounsell在推文都分享了他们的发现。Tom在包的元数据说明中注意到这样一段话：“PowerShell是开源、跨平台、脚本语言和丰富的对象Shell。”但是目前尚未得到微软官方证实。<br><a id="more"></a></p>
<h2 id="PowerShell已经开源了？"><a href="#PowerShell已经开源了？" class="headerlink" title="PowerShell已经开源了？"></a>PowerShell已经开源了？</h2><p>问：微软的PowerShell脚本语言已经开源了 ？</p>
<p>答：绝对真的！已经！</p>
<p>问：源码在哪？</p>
<p>答：微软.net源码网站。   <a href="http://referencesource.microsoft.com/" target="_blank" rel="external">http://referencesource.microsoft.com/</a></p>
<p>问：为什么在哪里？</p>
<p>答： powershell本身是基于.net的。是<code>System.Management</code>其中的一个类。</p>
<p>问：powershell源码如何看？</p>
<p>答：在 namespaces 搜索栏输入  </p>
<p><code>System.Management.Automation.PowerShell</code></p>
<p><code>System.Management.Automation.ScriptBlock</code> 等。</p>
<h2 id="问：powershell有什么特色？"><a href="#问：powershell有什么特色？" class="headerlink" title="问：powershell有什么特色？"></a>问：powershell有什么特色？</h2><p>答：cmd（bat）中有命令行管道。vbs中有面向对象。 powershell相当于bat+vbs。既有命令行和管道，又有面向对象。并极大增强了命令。相当于linux中的bash+python。</p>
<p>面向对象比字符串增加了属性和方法。 返回的属性，比字符串粒度更小，更严禁细致。让你写脚本不用扣字符串。 方法让你不用编程，就有相关功能。</p>
<h2 id="问：能否介绍下windows命令行的历史？"><a href="#问：能否介绍下windows命令行的历史？" class="headerlink" title="问：能否介绍下windows命令行的历史？"></a>问：能否介绍下windows命令行的历史？</h2><p>答： win2000时代：基本上只有图形功能，而对应的命令缺失。</p>
<p>win2003时代：图形功能，基本都有对应的命令。但只限于win。</p>
<p>win2008时代：除了win之外的微软软件中。图形功能，而对应的命令基本全了。但还都是面向字符串的。</p>
<p>win2012时代：重新造所有轮，用所有powershell命令代替所有字符串命令。使windows命令行全面进化到【面向对象】阶段。 </p>
<p>winxp：cmd命令行。</p>
<p>win7：基本powershell。</p>
<p>win8.1：全面【面向对象】。</p>
<p>win10：更全面，连剪贴板都面向对象了！ </p>
<h2 id="问：powershell的缺点是什么？"><a href="#问：powershell的缺点是什么？" class="headerlink" title="问：powershell的缺点是什么？"></a>问：powershell的缺点是什么？</h2><p>答： 依赖高版本windows。 </p>
<h2 id="问：兼容老版CMD"><a href="#问：兼容老版CMD" class="headerlink" title="问：兼容老版CMD?"></a>问：兼容老版CMD?</h2><p>答：1 语法不兼容cmd和bat。powershell语法更佳。</p>
<p>2 所有外部命令都兼容。比如ping.exe等。 </p>
<p>问：powershell源码的字体和配色，看起来有点矮丑挫，咋办？</p>
<p>答：用powershell ise 高大上 【字体 + 配色文件】。  </p>
<h2 id="问：powershell比CMD（bat）强在哪"><a href="#问：powershell比CMD（bat）强在哪" class="headerlink" title="问：powershell比CMD（bat）强在哪?"></a>问：powershell比CMD（bat）强在哪?</h2><p>答：</p>
<p>1 语法方面。语法简单。有函数，功能强大。</p>
<p>2 有正则，有查找，替换，切割，有大字符串对象，更适合于处理字符串。</p>
<p>3 有多线程并发，多进程并发。有计时器。有图形界面。</p>
<h2 id="问：powershell比python如何？"><a href="#问：powershell比python如何？" class="headerlink" title="问：powershell比python如何？"></a>问：powershell比python如何？</h2><p>答：</p>
<p>1 python可以跨平台，powershell暂时不能，这是缺点。</p>
<p>2 powershell为win峰。win本地深耕比python深。而python有些独有的linux功能powershell没有。</p>
<p>2.1 有管理dns服务器，dhcp服务器，打印机，网卡，域服务器，exchange服务器管理命令。这些python不行。</p>
<p>2.2 .net内置图形界面【System.Windows.Forms】powershell开发图形界面比python容易。</p>
<p>3 手册中文，开发工具中文，调试功能佳。不容易乱码等。   </p>
<h2 id="问：powershell比linux-bash如何？"><a href="#问：powershell比linux-bash如何？" class="headerlink" title="问：powershell比linux bash如何？"></a>问：powershell比linux bash如何？</h2><p>答：</p>
<p>1 bash中没有属性方法，python中没有管道命令行。假如python带有命令行管道，bash跪不？</p>
<p>2 bash中有多线程，计时器，图形界面？ </p>
<h2 id="问：我听说linux命令比win多，更全，对么？"><a href="#问：我听说linux命令比win多，更全，对么？" class="headerlink" title="问：我听说linux命令比win多，更全，对么？"></a>问：我听说linux命令比win多，更全，对么？</h2><p>答：</p>
<p>win中命令更多，更全面，linux不行。</p>
<p>1 powershell命令比linux多得多。</p>
<p>2 linux软件中，很多命令缺失。不能【修改软件运行时的配置】。</p>
<p>2.1 上述exchange服务器，命令手册在：    <a href="https://technet.microsoft.com/zh-cn/library/bb124413.aspx" target="_blank" rel="external">https://technet.microsoft.com/zh-cn/library/bb124413.aspx</a>    500多条命令，哪个linux邮件服务器能比？</p>
<p>2.2 给bind服务器中的一个dns域中的一个域名，添加一个ip。如何用命令实现？</p>
<p>3 linux软件依赖配置文件，但是有些命令只能【修改软件运行时的配置】。而没有【导出单个配置到文件】，【导出所有配置到文件】的功能。</p>
<p>3.1 win2012中的iis管理命令中有Backup-WebConfiguration，Clear-WebConfiguration，Get-WebConfiguration，Restore-WebConfiguration。这些命令 今年出的nginx中有对应的命令么？ </p>
<h2 id="问：powershell能管理linux么？"><a href="#问：powershell能管理linux么？" class="headerlink" title="问：powershell能管理linux么？"></a>问：powershell能管理linux么？</h2><p>答： 可以的。</p>
<p>powershell的做法是外部合作，而不是内部取代bash。</p>
<p>1 通过【powershell dsc】或【powershell + sftp客户端】来推拉配置文件。</p>
<p>2 通过【ssh客户端模块】，模拟linux终端。远程调用linux内置的bash，python等，返回结果。 </p>
<h2 id="问：我只有winxp，2001年出的，没装powershell，没有curl，就没法用powershell了吧？"><a href="#问：我只有winxp，2001年出的，没装powershell，没有curl，就没法用powershell了吧？" class="headerlink" title="问：我只有winxp，2001年出的，没装powershell，没有curl，就没法用powershell了吧？"></a>问：我只有winxp，2001年出的，没装powershell，没有curl，就没法用powershell了吧？</h2><p>答： 可以的。</p>
<p>还是用外部合作的办法。通过http(s)，用b/s的方法访问。</p>
<p>1 找一台有高版本win的电脑或虚拟机，在上面安装上支持powershell的http服务器。如： <a href="http://www.poshserver.net/" target="_blank" rel="external">http://www.poshserver.net/</a>            这个软件支持http，https，php，powershell，自定义端口，win认证。</p>
<p>2 在bat中用mshta ( <a href="http://powershell服务器ip/xxx.ps1" target="_blank" rel="external">http://powershell服务器ip/xxx.ps1</a> “get-date” ) 之类的命令即可。 </p>
<h2 id="问：powershell的强项优势是什么？"><a href="#问：powershell的强项优势是什么？" class="headerlink" title="问：powershell的强项优势是什么？"></a>问：powershell的强项优势是什么？</h2><p>答：</p>
<p>1 .net在win中的性能【应该最佳】，强于java和python。用同样语句，用同样对象的powershell脚本，我测了几个，比py稍 快。（未做定论）个人认为是虚拟机优化的最好的原因。</p>
<p>2 开发winform，wpf图形界面。或者即是命令行，又是图形程序。（类似于ghost.exe）</p>
<p>3 powershell多线程可以用多核。</p>
<p>4 win系统管理最强，绝大数微软软件。</p>
<p>5 管理vmware，微软云，亚马逊云，和云中的虚拟机。 </p>
<h2 id="问：将来powershell会进入安卓，mac-osx么？"><a href="#问：将来powershell会进入安卓，mac-osx么？" class="headerlink" title="问：将来powershell会进入安卓，mac osx么？"></a>问：将来powershell会进入安卓，mac osx么？</h2><p>答： 不知道。</p>
<p>但powershell会进入物联网系统。win11 iot？将来树莓派应该可以用上。</p>
<h2 id="资料文献"><a href="#资料文献" class="headerlink" title="资料文献"></a>资料文献</h2><p>原文地址：<a href="http://www.windoweye.com/news/2016/07/281052.html" target="_blank" rel="external">http://www.windoweye.com/news/2016/07/281052.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;微软有计划在近期内开源PowerShell&quot;&gt;&lt;a href=&quot;#微软有计划在近期内开源PowerShell&quot; class=&quot;headerlink&quot; title=&quot;微软有计划在近期内开源PowerShell&quot;&gt;&lt;/a&gt;微软有计划在近期内开源PowerShell&lt;/h2&gt;&lt;p&gt;近日微软再次在向开源投出橄榄枝， PowerShell是面向Windows和Windows Server的自动化平台和脚本语言，帮助用户简化系统的管理。在纳德拉的带领下微软也逐渐走向开放，根据相关爆料称微软有计划在近期内 开源该脚本语言。&lt;/p&gt;
&lt;p&gt;知名Windows爆料人士WalkingCat和Tom Hounsell在推文都分享了他们的发现。Tom在包的元数据说明中注意到这样一段话：“PowerShell是开源、跨平台、脚本语言和丰富的对象Shell。”但是目前尚未得到微软官方证实。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从Unity3D编译器升级聊起Mono</title>
    <link href="https://zhaoqingqing.github.io/2016/08/08/unity3d-csharp-compiler-mono.html"/>
    <id>https://zhaoqingqing.github.io/2016/08/08/unity3d-csharp-compiler-mono.html</id>
    <published>2016-08-07T16:00:00.000Z</published>
    <updated>2016-08-11T13:48:40.665Z</updated>
    
    <content type="html"><![CDATA[<p>接前篇<a href="http://www.cnblogs.com/zhaoqingqing/p/5745881.html" target="_blank" rel="external">Unity 5.3.5p8 C#编译器升级</a>，本文侧重了解一些Mono的知识。</p>
<a id="more"></a>
<h2 id="Unity3D的编译器升级"><a href="#Unity3D的编译器升级" class="headerlink" title="Unity3D的编译器升级"></a>Unity3D的编译器升级</h2><p>新升级的Mono C#编译器（对应Mono 4.4）</p>
<p>Unity编辑器及播放器所使用的Mono运行时还未升级。</p>
<p>新编译器仍针对C# 4，是旧的编译器也支持的版本。</p>
<p>新编译器目标框架为.Net 3.5，也是之前支持的框架。</p>
<h3 id="Mono是如何运行的？"><a href="#Mono是如何运行的？" class="headerlink" title="Mono是如何运行的？"></a>Mono是如何运行的？</h3><ol>
<li>*.cs源文件通过编译器编译成IL(中间文件)</li>
<li>IL 运行在Mono的 JIT(just in time)</li>
<li>Mono虚拟机运行在物理机中</li>
</ol>
<h3 id="查看Unity使用的Mono版本"><a href="#查看Unity使用的Mono版本" class="headerlink" title="查看Unity使用的Mono版本"></a>查看Unity使用的Mono版本</h3><p>参考：<a href="http://answers.unity3d.com/questions/259448/how-to-determine-mono-version-of-unity-.html" target="_blank" rel="external">http://answers.unity3d.com/questions/259448/how-to-determine-mono-version-of-unity-.html</a></p>
<p>我在unity 5.3.4f1 中测试有效，而在unity 4.3.4f1下测试无效</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Reflection;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonoVersion</span> : <span class="title">MonoBehaviour</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		Type type = Type.GetType(<span class="string">"Mono.Runtime"</span>);</div><div class="line">		<span class="keyword">if</span> (type != <span class="literal">null</span>)</div><div class="line">		&#123;</div><div class="line">			MethodInfo info = type.GetMethod(<span class="string">"GetDisplayName"</span>, BindingFlags.NonPublic | BindingFlags.Static);</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (info != <span class="literal">null</span>)</div><div class="line">				Debug.Log(info.Invoke(<span class="literal">null</span>, <span class="literal">null</span>));</div><div class="line">		&#125;</div><div class="line">      <span class="comment">//Debug.Log(System.Enviroment.Version);//net version?</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d:\Program Files\Unity_5_34\Editor\Data\Mono\bin&gt;monop2 --runtime-version mono.exe</div><div class="line">runtime version: <span class="number">2.0</span>.<span class="number">50727.1433</span></div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">d:\Program Files\Unity_5_34\Editor\Data\Mono\bin&gt;mono.exe --version</div><div class="line">Mono JIT compiler version <span class="number">2.0</span> (Visual Studio built mono)</div><div class="line">Copyright (C) <span class="number">2002</span>-<span class="number">2010</span> Novell, Inc and Contributors. www.mono-project.com</div><div class="line">        TLS:           normal</div><div class="line">        GC:            Included Boehm (with typed GC)</div><div class="line">        SIGSEGV:       normal</div><div class="line">        Notification:  Thread + polling</div><div class="line">        Architecture:  x86</div><div class="line">        Disabled:      none</div></pre></td></tr></table></figure>
<h2 id="Mono"><a href="#Mono" class="headerlink" title="Mono"></a>Mono</h2><h3 id="Mono是-Net-Framework？"><a href="#Mono是-Net-Framework？" class="headerlink" title="Mono是.Net Framework？"></a>Mono是.Net Framework？</h3><p>.NET和Mono两者是完全独立的，简单的理解：Mono项目是第三方的.Net Framework实现，比喻为.Net的跨平台版，绝大多数C#的特性在.net和mono中都是相同的，少部分特性两者的实现不一致。</p>
<p>Mono的目标是创建一系列符合ECMA 标准（<code>Ecma-334</code>和<code>Ecma-33</code>5）的.NET 工具，包括C# 编译器和共通语言执行平台</p>
<p>Mono 虚拟机包含一个实时编译引擎，该引擎可用于如下处理器：x86，SPARC，PowerPC，ARM，S390（32位模式和64位模式），x86-64，IA64 和64位模式的 SPARC。该虚拟机可以将代码实时编译或者预先编译到原生代码。对于那些没有列出来的系统，则使用的是代码解释器。</p>
<hr>
<p>这部分内容摘自：<a href="http://www.mono-project.com/docs/about-mono/" target="_blank" rel="external">http://www.mono-project.com/docs/about-mono/</a></p>
<h3 id="mono-C-Compiler"><a href="#mono-C-Compiler" class="headerlink" title="mono - C# Compiler"></a>mono - C# Compiler</h3><blockquote>
<p>Mono’s C# compiler is feature complete for C# 1.0, 2.0, 3.0, 4.0 and 5.0 (ECMA). A good description of the feature of the various versions is available on <a href="http://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29#Versions" target="_blank" rel="external">Wikipedia</a>.</p>
<p>mono的c#编译器提供c# 1.0,2.0,3.0,4.0和5.0(ECMA)完整的功能。不同版本的特性的描述可以在<a href="http://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29#Versions" target="_blank" rel="external">维基百科</a>上查看。</p>
</blockquote>
<h3 id="mono-Mono-Runtime"><a href="#mono-Mono-Runtime" class="headerlink" title="mono - Mono Runtime"></a>mono - Mono Runtime</h3><blockquote>
<p>The runtime implements the ECMA Common Language Infrastructure (CLI). The runtime provides a Just-in-Time (JIT) compiler, an Ahead-of-Time compiler (AOT), a library loader, the garbage collector, a threading system and interoperability functionality.</p>
<p>mono运行时实现了ECMA 公共语言基础(CLI)。运行时提供了即时(JIT)编译器，提前的编译器(AOT)，库加载器，垃圾回收机器，线程操作，互操作性</p>
</blockquote>
<h3 id="mono-NET-Frame-Class-Libray"><a href="#mono-NET-Frame-Class-Libray" class="headerlink" title="mono - .NET Frame Class Libray"></a>mono - .NET Frame Class Libray</h3><blockquote>
<p>The Mono platform provides a comprehensive set of classes that provide a solid foundation to build applications on. These classes are compatible with Microsoft’s .Net Framework classes.</p>
<p>Mono平台提供了一组全面的类来构建应用程序提供一个坚实的基础。这些类是兼容微软的.Net framework</p>
</blockquote>
<h3 id="mono-Mono-Class-Libray"><a href="#mono-Mono-Class-Libray" class="headerlink" title="mono - Mono Class Libray"></a>mono - Mono Class Libray</h3><blockquote>
<p>Mono also provides many classes that go above and beyond the Base Class Library provided by Microsoft. These provide additional functionality that are useful, especially in building Linux applications. Some examples are classes for Gtk+, Zip files, LDAP, OpenGL, Cairo, POSIX, etc.</p>
<p>Mono还提供了很多类,甚至超越了微软提供的基类库。这些提供额外的功能是有用的,特别是在构建Linux应用程序。一些例子是Gtk +,Zip文件、LDAP、OpenGL,Cairo,POSIX等等。</p>
</blockquote>
<h2 id="Net和Mono"><a href="#Net和Mono" class="headerlink" title=".Net和Mono"></a>.Net和Mono</h2><h3 id="Net和C-版本"><a href="#Net和C-版本" class="headerlink" title=".Net和C#版本"></a>.Net和C#版本</h3><p>.Net版本和C#版本：<a href="http://www.cnblogs.com/zhaoqingqing/p/5478239.html" target="_blank" rel="external">http://www.cnblogs.com/zhaoqingqing/p/5478239.html</a></p>
<table>
<thead>
<tr>
<th>.net framework</th>
<th>c# version</th>
<th>note</th>
<th>date</th>
</tr>
</thead>
<tbody>
<tr>
<td>.net 3.5</td>
<td>3.0</td>
<td>vs2008</td>
<td>2007-08</td>
</tr>
<tr>
<td>.net 4.0</td>
<td>4.0</td>
<td>vs2010</td>
<td>2010-04</td>
</tr>
<tr>
<td>.net 4.5</td>
<td>5.0</td>
<td>vs2012/13</td>
<td>2012-10</td>
</tr>
<tr>
<td>.net 4.6</td>
<td>6.0</td>
<td>vs2015</td>
<td>2015-07</td>
</tr>
</tbody>
</table>
<h3 id="Net和Mono版本关系"><a href="#Net和Mono版本关系" class="headerlink" title=".Net和Mono版本关系"></a>.Net和Mono版本关系</h3><p>一个大致的版本对应关系</p>
<table>
<thead>
<tr>
<th>date</th>
<th>mono version</th>
<th>net version</th>
<th>note</th>
</tr>
</thead>
<tbody>
<tr>
<td>2008-10-01</td>
<td>mono 2.0</td>
<td>.net 2.0    c# 3.0</td>
<td></td>
</tr>
<tr>
<td>2011-12-19</td>
<td>mono 2.10.8</td>
<td>.net 4.0    c# 4.0</td>
<td></td>
</tr>
<tr>
<td>2014-03-31</td>
<td>mono 3.4</td>
<td>.net 4.5    c#5.0</td>
<td></td>
</tr>
<tr>
<td>2016-06-08</td>
<td>mono 4.4.0</td>
<td>.net 4.6.1    c#6.0</td>
</tr>
</tbody>
</table>
<p>mono编译器版本升级 mono运行库没有升级，目前运行时的mono还是 3.5</p>
<h3 id="Mono发行版本"><a href="#Mono发行版本" class="headerlink" title="Mono发行版本"></a>Mono发行版本</h3><table>
<thead>
<tr>
<th>Date(时间)</th>
<th>Version(版本)</th>
<th>Note(备注)</th>
</tr>
</thead>
<tbody>
<tr>
<td>2004-06-30</td>
<td>1.0</td>
<td>C# 1.0 support</td>
</tr>
<tr>
<td>2006-11-09</td>
<td>1.2</td>
<td>C# 2.0 support</td>
</tr>
<tr>
<td>2008-10-06</td>
<td>2.0</td>
<td>.Net 2.0 C# 3.0</td>
</tr>
<tr>
<td>2010-09-22</td>
<td>2.8</td>
<td>.Net profile C#4.0 support</td>
</tr>
<tr>
<td>2012-10-15</td>
<td>3.0</td>
<td>C# 5.0 support,async base class libray,MVC4 partial</td>
</tr>
<tr>
<td>2014-03-31</td>
<td>3.4</td>
<td></td>
</tr>
<tr>
<td>2015-04-29</td>
<td>4.0</td>
<td>.NET 4.5 profile .NET4.5 assembiles,C#6.0,integrate .net core code</td>
</tr>
<tr>
<td>2014-03-31</td>
<td>4.2</td>
<td></td>
</tr>
<tr>
<td>2016-06-08</td>
<td>4.4</td>
<td></td>
</tr>
<tr>
<td>2016-08-01</td>
<td>4.6</td>
</tr>
</tbody>
</table>
<p>2016 Mono joins the .NET Foundation</p>
<blockquote>
<p>参考资料</p>
</blockquote>
<p>Mono release: <a href="http://www.mono-project.com/docs/about-mono/releases/" target="_blank" rel="external">http://www.mono-project.com/docs/about-mono/releases/</a><br>Mono 4.4：<a href="http://www.mono-project.com/docs/about-mono/releases/4.4.0/" target="_blank" rel="external">http://www.mono-project.com/docs/about-mono/releases/4.4.0/</a><br>Mono software: <a href="https://en.wikipedia.org/wiki/Mono_(software" target="_blank" rel="external">https://en.wikipedia.org/wiki/Mono_(software)</a>)</p>
<h3 id="Unity3D发行版本"><a href="#Unity3D发行版本" class="headerlink" title="Unity3D发行版本"></a>Unity3D发行版本</h3><table>
<thead>
<tr>
<th>Unity Version</th>
<th>Mono Runtime/Compiler Version</th>
<th>Note</th>
</tr>
</thead>
<tbody>
<tr>
<td>3.5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>4.0</td>
<td></td>
<td>引擎大版本升级</td>
</tr>
<tr>
<td>4.3</td>
<td></td>
<td>新的2D工具，Sprite</td>
</tr>
<tr>
<td>4.6</td>
<td></td>
<td>uGUI，IL2CPP</td>
</tr>
<tr>
<td>5.0</td>
<td>2.0/2.0</td>
<td>shader，assetbundle重大改变 ，等等</td>
</tr>
<tr>
<td>5.3.5p8</td>
<td>2.0/4.4</td>
<td>Mono编译器升级运行时未升级，等等</td>
</tr>
<tr>
<td>5.4.0 f1</td>
<td>2.0/2.0</td>
<td>更多VR平台支持，等等</td>
</tr>
</tbody>
</table>
<p>扩展资料</p>
<p><a href="http://blogs.unity3d.com/2016/04/01/unity-joins-the-net-foundation/" target="_blank" rel="external">http://blogs.unity3d.com/2016/04/01/unity-joins-the-net-foundation/</a></p>
<h2 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h2><h3 id="我的疑问"><a href="#我的疑问" class="headerlink" title="我的疑问"></a>我的疑问</h3><p>  编译器和运行时版本不匹配可以正常执行？</p>
<h3 id="文献资料"><a href="#文献资料" class="headerlink" title="文献资料"></a>文献资料</h3><p>mono project github: <a href="https://github.com/mono/mono" target="_blank" rel="external">https://github.com/mono/mono</a></p>
<p>mono doc: <a href="http://www.mono-project.com/docs/" target="_blank" rel="external">http://www.mono-project.com/docs/</a></p>
<p>Mono英文百科：<a href="https://en.wikipedia.org/wiki/Mono" target="_blank" rel="external"><a href="https://en.wikipedia.org/wiki/Mono" target="_blank" rel="external">https://en.wikipedia.org/wiki/Mono</a></a></p>
<p>Mono中文百科：<a href="https://zh.wikipedia.org/wiki/Mono" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Mono</a></p>
<h3 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h3><p><a href="http://www.cnblogs.com/shanyou/p/4295163.html" target="_blank" rel="external"><a href="http://www.cnblogs.com/shanyou/p/4295163.html" target="_blank" rel="external">.NET Core与.NET Framework、Mono之间的关系</a></a></p>
<p><a href="http://kb.cnblogs.com/page/514268/" target="_blank" rel="external">魅力 .NET：从 Mono、.NET Core 说起</a></p>
<p><a href="http://www.cnblogs.com/yeanzhi/archive/2013/02/24/2924687.html" target="_blank" rel="external">[c#基础系列二]：从编译，执行过程理解c#</a></p>
<p><a href="http://www.cnblogs.com/murongxiaopifu/p/4211964.html" target="_blank" rel="external">Mono为何能跨平台？聊聊CIL(MSIL)</a></p>
<p>国内 Mono 相关文章汇总：<a href="http://www.cnblogs.com/shanyou/archive/2012/07/28/2612919.html" target="_blank" rel="external">http://www.cnblogs.com/shanyou/archive/2012/07/28/2612919.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接前篇&lt;a href=&quot;http://www.cnblogs.com/zhaoqingqing/p/5745881.html&quot;&gt;Unity 5.3.5p8 C#编译器升级&lt;/a&gt;，本文侧重了解一些Mono的知识。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity3D技术积累" scheme="https://zhaoqingqing.github.io/categories/Unity3D%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="Unity3D" scheme="https://zhaoqingqing.github.io/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>Unity 5.3.5p8 C#编译器升级</title>
    <link href="https://zhaoqingqing.github.io/2016/08/06/unity3d-5.3.5p8-csharpcompiler-upgrade.html"/>
    <id>https://zhaoqingqing.github.io/2016/08/06/unity3d-5.3.5p8-csharpcompiler-upgrade.html</id>
    <published>2016-08-05T16:00:00.000Z</published>
    <updated>2016-08-07T15:12:49.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unity-5-3-5p8的C-编译器升级"><a href="#Unity-5-3-5p8的C-编译器升级" class="headerlink" title="Unity 5.3.5p8的C#编译器升级"></a>Unity 5.3.5p8的C#编译器升级</h2><p><strong>注意：该版本是单独升级C#编译器的测试版！请使用文中提供的下载链接！</strong></p>
<p>基于Unity 5.3.5p8的C#编译器升级！<a href="http://beta.unity3d.com/download/5e8bd2cd2415/public_download.html" target="_blank" rel="external">下载链接</a></p>
<p>试用该版本前请先备份项目，遇到任何问题请及时反馈到Unity官方中文社区（<a href="http://forum.china.unity3d.com/）。" target="_blank" rel="external">http://forum.china.unity3d.com/）。</a></p>
<p>新升级的Mono C#编译器（对应Mono 4.4）将用于编译所有的C#脚本。<br><a id="more"></a></p>
<h2 id="重要注意事项"><a href="#重要注意事项" class="headerlink" title="重要注意事项"></a>重要注意事项</h2><p>Unity编辑器及播放器所使用的Mono运行时还未升级。<br>新编译器仍针对C# 4。是旧的编译器也支持的版本。<br>新编译器目标框架为.Net 3.5，也是之前支持的框架。</p>
<p>这只是升级Mono/.Net迈出的第一步。</p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="对现有项目有何影响？"><a href="#对现有项目有何影响？" class="headerlink" title="对现有项目有何影响？"></a>对现有项目有何影响？</h3><p>该升级应该能够“正常工作”，它并未添加任何新功能。不会对现有项目带来任何影响，还有些小益处。新的Mono和C#编译器与之前相比运行速度普遍更快，而且修复了多年以来的Bug。</p>
<h3 id="有什么需要注意的？"><a href="#有什么需要注意的？" class="headerlink" title="有什么需要注意的？"></a>有什么需要注意的？</h3><p>理论上有可能在运行时产生奇怪的问题。但我们自己测试的过程中并未发现。</p>
<p>大多数情况下都会在编译时发现问题。目前为止我们遇到的情况有：<br>有些无效的C#代码是旧的编译器允许但新的编译器会报错的<br>涉及到编译器特定属性（安装目录、名称等）的代码或插件会出错</p>
<p>另外，如果你经常使用MonoDevelop或VSTU（Visual Studio Tools for Unity）调试C#代码，那欢迎向我们反馈你遇到的任何问题。编译器输出结果应该是一致的，但调试器可能对于某些生成的代码模式会很敏感。</p>
<h3 id="有什么重大变化吗？"><a href="#有什么重大变化吗？" class="headerlink" title="有什么重大变化吗？"></a>有什么重大变化吗？</h3><p>新编译器有一处已知的重大变化，就是闭包获取foreach变量的方式，这是由C#语言团队做出的改变。也就是说，如下代码将输出“b a r”而非目前的“r r r”：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> actions = <span class="keyword">new</span> Action[<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> c <span class="keyword">in</span> <span class="string">"bar"</span>)</div><div class="line">   actions[j++] = () =&gt; Console.WriteLine(c);</div><div class="line">         </div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> a <span class="keyword">in</span> actions)       </div><div class="line">    a();</div></pre></td></tr></table></figure>
<p>使用较新的VS或Mono均会得到这样的结果，这也是目前WSA平台所表现的行为，具体细节请看：</p>
<p><a href="https://msdn.microsoft.com/en-us/library/hh678682(v=vs.110" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/hh678682(v=vs.110).aspx</a>.aspx)</p>
<h3 id="是否修复了“foreach”内存分配的问题？"><a href="#是否修复了“foreach”内存分配的问题？" class="headerlink" title="是否修复了“foreach”内存分配的问题？"></a>是否修复了“foreach”内存分配的问题？</h3><p>某些情况下是的，问题描述请看：</p>
<p><a href="http://stackoverflow.com/questions/18552669/memory-allocation-when-using-foreach-loops-in-c-sharp" target="_blank" rel="external">http://stackoverflow.com/questions/18552669/memory-allocation-when-using-foreach-loops-in-c-sharp</a></p>
<p>对Array、List<t>、Dictionary<t>或HashSet<t>做“foreach”遍历是不会分配内存的。</t></t></t></p>
<h3 id="为何不面向C-5或C-6？"><a href="#为何不面向C-5或C-6？" class="headerlink" title="为何不面向C# 5或C# 6？"></a>为何不面向C# 5或C# 6？</h3><p>第一步我们希望先推出新的编译器。未来再启用新的C#特性。</p>
<p>支持C#语言新特性面临的几个问题：<br>目前的生态系统不能完全把控新的C#（脚本更新器、调试器、特定的MonoDevelop/VisualStudio版本）<br>目前仍以旧的.Net 3.5为目标框架。在旧框架上支持新的C#或多或少会导致些迷惑。从头开始编写所有代码也许可行，但对于已有代码来说可能需要C#语言和框架都是最新才可以。</p>
<p style="text-align: left;">原文出处：<a href="http://forum.china.unity3d.com/thread-19893-1-1.html" target="_blank" rel="external">http://forum.china.unity3d.com/thread-19893-1-1.html</a><br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Unity-5-3-5p8的C-编译器升级&quot;&gt;&lt;a href=&quot;#Unity-5-3-5p8的C-编译器升级&quot; class=&quot;headerlink&quot; title=&quot;Unity 5.3.5p8的C#编译器升级&quot;&gt;&lt;/a&gt;Unity 5.3.5p8的C#编译器升级&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注意：该版本是单独升级C#编译器的测试版！请使用文中提供的下载链接！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于Unity 5.3.5p8的C#编译器升级！&lt;a href=&quot;http://beta.unity3d.com/download/5e8bd2cd2415/public_download.html&quot;&gt;下载链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;试用该版本前请先备份项目，遇到任何问题请及时反馈到Unity官方中文社区（&lt;a href=&quot;http://forum.china.unity3d.com/）。&quot;&gt;http://forum.china.unity3d.com/）。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新升级的Mono C#编译器（对应Mono 4.4）将用于编译所有的C#脚本。&lt;br&gt;
    
    </summary>
    
      <category term="Unity3D技术积累" scheme="https://zhaoqingqing.github.io/categories/Unity3D%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="Unity3D官方" scheme="https://zhaoqingqing.github.io/tags/Unity3D%E5%AE%98%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>Unity3D-Assetbundle-打包和更新的两种做法</title>
    <link href="https://zhaoqingqing.github.io/2016/08/05/unity_assetbundle-build&amp;update-twomethod.html"/>
    <id>https://zhaoqingqing.github.io/2016/08/05/unity_assetbundle-build&amp;update-twomethod.html</id>
    <published>2016-08-04T16:00:00.000Z</published>
    <updated>2016-08-08T12:56:17.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文根据过往项目经验所写，部分版权归所属公司所有，未涉及代码部分。<br>两个项目有着不同的资源管理的方式：</p>
<ul>
<li>3D MMO RPG：    整体打包</li>
<li>2D日式动作RPG：分散打包<a id="more"></a>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3></li>
</ul>
<p>开发引擎：unity3d 4.x<br>运行环境：android/ios<br>解包工具：unity studio <a href="http://www.cnblogs.com/zhaoqingqing/p/3751351.html" target="_blank" rel="external">http://www.cnblogs.com/zhaoqingqing/p/3751351.html</a><br>安卓模拟器：海马玩 v0.10.x + 文件管理器 ，基于安卓os 4.2.2</p>
<h2 id="完整打包"><a href="#完整打包" class="headerlink" title="完整打包"></a>完整打包</h2><p>每一个资源都是整体打包，下面举例说明</p>
<h3 id="npc打包例子"><a href="#npc打包例子" class="headerlink" title="npc打包例子"></a>npc打包例子</h3><p>某NPC文件<strong>zjws_01f_c.unity3d</strong> ，解包后的文件如下：</p>
<ul>
<li>dian02 #-464001035.dds</li>
<li>ZJWS_01F_C #862139260.dds</li>
<li>ZB_WS_JJIA01F_C #-358047209.dds</li>
<li>uicharacter #977472046.shader</li>
<li>Particle Alpha Blend #434039645.shader</li>
<li>Sprite Vertex Colored #1478359439.shader</li>
</ul>
<p>在Unity Studio中看到的Hierarchy如下：</p>
<pre>
zjws_01f_c
    run_stand_f
    zb_ws_jjiao1f
    zjws_01f
    zjws_01f_silianji
    zjws_01f_c
</pre>

<hr>
<h3 id="地图打包例子"><a href="#地图打包例子" class="headerlink" title="地图打包例子"></a>地图打包例子</h3><p>TODO地图</p>
<p>M1_ACT_ZBT_Minimap.unity3d 某贴图文件，解包后的文件如下：</p>
<ul>
<li>M1_ACT_ZBT_Minimap #02.dds</li>
<li>Unlit-Alpha #03.shader</li>
</ul>
<p>在Unity Studio中看到的Hierarchy如下：</p>
<pre>
无
</pre>

<h3 id="UI打包例子"><a href="#UI打包例子" class="headerlink" title="UI打包例子"></a>UI打包例子</h3><p>zjws_01f_c.unity3d 某NPC文件，解包后的文件如下：</p>
<ul>
<li>dian02 #-464001035.dds</li>
<li>ZJWS_01F_C #862139260.dds</li>
<li>ZB_WS_JJIA01F_C #-358047209.dds</li>
<li>uicharacter #977472046.shader</li>
<li>Particle Alpha Blend #434039645.shader</li>
<li>Sprite Vertex Colored #1478359439.shader</li>
</ul>
<p>在Unity Studio中看到的Hierarchy如下：</p>
<pre>
zjws_01f_c
    run_stand_f
    zb_ws_jjiao1f
    zjws_01f
    zjws_01f_silianji
    zjws_01f_c
</pre>

<h2 id="资源更新"><a href="#资源更新" class="headerlink" title="资源更新"></a>资源更新</h2><h3 id="如何触发更新"><a href="#如何触发更新" class="headerlink" title="如何触发更新"></a>如何触发更新</h3><h3 id="resversion-txt-文件列表"><a href="#resversion-txt-文件列表" class="headerlink" title="resversion.txt 文件列表"></a>resversion.txt 文件列表</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"buildDatetime"</span>: <span class="string">"20160728-010315"</span>,</div><div class="line">    <span class="attr">"listResInfo"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"strName"</span>: <span class="string">"M2_ZC_Minimap"</span>,</div><div class="line">            <span class="attr">"strPath"</span>: <span class="string">"textures/M2_ZC_Minimap.unity3d"</span>,</div><div class="line">            <span class="attr">"strHash"</span>: <span class="string">"bfbe425f3b74abad3fd3219c7510d6b1"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"strName"</span>: <span class="string">"settingclient"</span>,</div><div class="line">            <span class="attr">"strPath"</span>: <span class="string">"settingclient.unity3d"</span>,</div><div class="line">            <span class="attr">"strHash"</span>: <span class="string">"6a88b87c1cce7ff2acbb8782bf7503e"</span></div><div class="line">        &#125;</div><div class="line">          ......此处省略几千行</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本地的：buildDatetime : 20160727-115054<br>服务器：buildDatetime : 20160728-010315<br>两边不一致，玩家需要下载更新<br>PS:每次根据resversion的内容是否相同来判断是否需要更新资源</p>
<h3 id="要更新的文件"><a href="#要更新的文件" class="headerlink" title="要更新的文件"></a>要更新的文件</h3><p>制作的更新包如下：</p>
<h3 id="android-目录"><a href="#android-目录" class="headerlink" title="android 目录"></a>android 目录</h3><p>路径：/mnt - sdcard - Android - data - com.xx.xxgame.uc - files - xxgame - data - android</p>
<ol>
<li>resversion.unity3d</li>
<li>settingclient.unity3d</li>
<li>version.txt</li>
</ol>
<h2 id="资源目录"><a href="#资源目录" class="headerlink" title="资源目录"></a>资源目录</h2><p>StreamingAssets\</p>
<ul>
<li>Android\</li>
<li>IOS\</li>
<li>Windows\</li>
</ul>
<p>下面以Android目录为例</p>
<ul>
<li>assetbundles\</li>
<li>scene\<ul>
<li>textures\</li>
<li>resversion.txt</li>
<li>resversion.unity3d</li>
<li>settingclient.unity3d  (客户端所有的配置表，打包进同一个ab文件)</li>
</ul>
</li>
</ul>
<h3 id="目录详解"><a href="#目录详解" class="headerlink" title="目录详解"></a>目录详解</h3><pre>
assetbundles\
    assets
    audios
    fightskill
    npc
    scene
       building
       rocks
       map/trees/textures
       ....more scene files
    ui

------------
scene\
    xxboos
       xxboss.unity3d
       xxboss.txt
       xxboss.bar
       xxboss_nav.unity3d
    bht
       bht1trap1, bht1trap2, bht1trap3 | bht2trap1, bht2trap2, bht3trap3 |
       ....更多的主城文件

------------
textures\
    3D贴图文件

</pre>

<hr>
<h2 id="分散打包"><a href="#分散打包" class="headerlink" title="分散打包"></a>分散打包</h2><p>文件的打包是分散的，有依赖关系</p>
<p>TODO</p>
<h2 id="资源更新-1"><a href="#资源更新-1" class="headerlink" title="资源更新"></a>资源更新</h2><p>TODO</p>
<h3 id="如何触发更新-1"><a href="#如何触发更新-1" class="headerlink" title="如何触发更新"></a>如何触发更新</h3><p>本地assetbundle版本：10050，服务器assetbundle版本：10051，玩家需要下载更新。</p>
<h3 id="资源目录-1"><a href="#资源目录-1" class="headerlink" title="资源目录"></a>资源目录</h3><pre>
StreamingAssets
   Android
      Actor
      Audio
      Card
      Common
      Effect
      Level
      Map
      UI
      ....
      Version.txt
      GameSetting.ab (客户端所有的配置表，打包进同一个ab文件)
   IOS
   Windows
</pre>

<h3 id="更新文件"><a href="#更新文件" class="headerlink" title="更新文件"></a>更新文件</h3><p><strong>最新版本号文件</strong></p>
<ul>
<li>NewestVersion_Android.txt<br>内容：<code>10051</code> 最新的assetbundle版本号<br><br></li>
</ul>
<p><strong>更新包</strong></p>
<ul>
<li><p>Android_10050_10051.zip<br><em>10050更新到10051版本的要下载的资源</em></p>
</li>
<li><p>Android_born_10051.zip<br> <em>10051新APK包的初始资源</em></p>
</li>
<li><p>Android_full_10051.zip<br> <em>10051的完整资源</em><br><br></p>
</li>
</ul>
<p><strong>更新包json</strong></p>
<ul>
<li>Android_10050_10051.zip.json<br><code>{&quot;MD5&quot;:&quot;297714FA3CEF25C63AA6BF9432918278&quot;,&quot;Size&quot;:  62473769  ,&quot;FileCount&quot;:4438}</code></li>
<li>Android_born_10051.zip.json<br><code>{&quot;Size&quot;:  78895922  , &quot;FileCount&quot;: 4817, &quot;MD5&quot;: &quot;72FD467252329D01799DD65E9CCA23F0&quot;}</code></li>
<li>Android_full_10051.zip.json<br><code>{&quot;MD5&quot;:&quot;6F8D541B388C98A0FBDC6F5BF4DA7122&quot;,&quot;Size&quot;:  84529108  ,&quot;FileCount&quot;:4864}</code></li>
</ul>
<hr>
<h2 id="ab依赖处理"><a href="#ab依赖处理" class="headerlink" title="ab依赖处理"></a>ab依赖处理</h2><p>以下内容来自ulua&amp;tolua技术交流群，时间2016-08-03 14:30 ~ 15:30</p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p><strong>故国之晚秋 </strong></p>
<p>异步读取AB就是要注意，读取状态</p>
<p>因为AB不仅仅只有读取，还有清理策略，要防止正在加载，又被清理</p>
<p>还有就是，A依赖B，C也依赖B。现在读取A，先读取B，这时候立马读取C，这时候B也在读取，不要反复去读取，减少</p>
<p>读取A，本来就会形成队列A-&gt;C-&gt;D,这是A形成的队列，然后读取B，形成<br>B-&gt;C（只是把C的节点加到B，并不会再去加C后面的依赖，只是判断C的状态），读取顺序都是从右到左</p>
<p>并且，出现这个情况只是在都是处于正在读取状态</p>
<p>如果用WWW，同时读太多，内存吃紧</p>
<p>AB不要打得太散也不要打得太多</p>
<p>简单的解决办法：</p>
<p>同步AB都解决了，同步加载AB没有这个问题，同步ab最好不要做的太细。</p>
<p>同步很简单，同步读取AB</p>
<p><strong>上海-江南-5.3.1f4 </strong></p>
<p>特别是公共资源<br>多引用的单独打包<br>卸载清理要处理好</p>
<p>衣匠</p>
<p>记住一点，先依赖，后主资源</p>
<h3 id="资源名"><a href="#资源名" class="headerlink" title="资源名"></a>资源名</h3><p>自动化,</p>
<p>我是通过文件名规范来做，有人是通过工具来做</p>
<p>建目录的时候，加个@或者_就行，主要跟文件夹有关，否则一个资源一个AB</p>
<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>之前项目只支持非压缩AB，<br>后面加入压缩AB后，复杂度几何上升<br>之前游戏项目也只用了非压缩AB</p>
<p>我们现在也不用LZMA了，原因是加载速度和内存</p>
<h4 id="fbx压缩"><a href="#fbx压缩" class="headerlink" title="fbx压缩"></a>fbx压缩</h4><p>晚秋，你fbx压缩是3dmax导出的插件啊还是unity插件？</p>
<p>3DSMAX 脚本插件，和UNITY插件两个都有</p>
<p>原理：fbx剔除多余帧，有加判断</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>usb 沁血寒冰</p>
<hr>
<p><strong>故国之晚秋</strong></p>
<p>近期：开源fbx压缩</p>
<p>计划：ab加载依赖系统</p>
<h2 id="做法比较"><a href="#做法比较" class="headerlink" title="做法比较"></a>做法比较</h2><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><p>游戏中所有资源都打包成assetbundle，在游戏启动时进行加载。<br>同步和异步两种加载方式<br>Assetbundle文件放在StreamingAssets目录，区分不同平台。以stream的形式加载，用Unity的<code>www.load</code>API</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="完整打包-1"><a href="#完整打包-1" class="headerlink" title="完整打包"></a>完整打包</h4><p>在加载时一般只需要加载单个文件+共用资源即可，</p>
<h4 id="分散打包-1"><a href="#分散打包-1" class="headerlink" title="分散打包"></a>分散打包</h4><p>分散打包则先加载依赖再加载主文件</p>
<h4 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文根据过往项目经验所写，部分版权归所属公司所有，未涉及代码部分。&lt;br&gt;两个项目有着不同的资源管理的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3D MMO RPG：    整体打包&lt;/li&gt;
&lt;li&gt;2D日式动作RPG：分散打包
    
    </summary>
    
      <category term="Unity3D项目日志" scheme="https://zhaoqingqing.github.io/categories/Unity3D%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Unity3D" scheme="https://zhaoqingqing.github.io/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhaoqingqing.github.io/2016/08/01/hello-world.html"/>
    <id>https://zhaoqingqing.github.io/2016/08/01/hello-world.html</id>
    <published>2016-08-01T12:03:23.513Z</published>
    <updated>2016-08-02T15:29:15.548Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
